/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductVariantDeleteBatch_payload_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductVariantDeleteBatch_payload_inner::OAIProductVariantDeleteBatch_payload_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductVariantDeleteBatch_payload_inner::OAIProductVariantDeleteBatch_payload_inner() {
    this->initializeModel();
}

OAIProductVariantDeleteBatch_payload_inner::~OAIProductVariantDeleteBatch_payload_inner() {}

void OAIProductVariantDeleteBatch_payload_inner::initializeModel() {

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAIProductVariantDeleteBatch_payload_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductVariantDeleteBatch_payload_inner::fromJsonObject(QJsonObject json) {

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;
}

QString OAIProductVariantDeleteBatch_payload_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductVariantDeleteBatch_payload_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

QString OAIProductVariantDeleteBatch_payload_inner::getProductId() const {
    return m_product_id;
}
void OAIProductVariantDeleteBatch_payload_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductVariantDeleteBatch_payload_inner::getId() const {
    return m_id;
}
void OAIProductVariantDeleteBatch_payload_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductVariantDeleteBatch_payload_inner::getStoreId() const {
    return m_store_id;
}
void OAIProductVariantDeleteBatch_payload_inner::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIProductVariantDeleteBatch_payload_inner::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIProductVariantDeleteBatch_payload_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductVariantDeleteBatch_payload_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
