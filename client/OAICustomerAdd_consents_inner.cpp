/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerAdd_consents_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerAdd_consents_inner::OAICustomerAdd_consents_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerAdd_consents_inner::OAICustomerAdd_consents_inner() {
    this->initializeModel();
}

OAICustomerAdd_consents_inner::~OAICustomerAdd_consents_inner() {}

void OAICustomerAdd_consents_inner::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_opt_in_level_isSet = false;
    m_opt_in_level_isValid = false;
}

void OAICustomerAdd_consents_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerAdd_consents_inner::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_opt_in_level_isValid = ::OpenAPI::fromJsonValue(m_opt_in_level, json[QString("opt_in_level")]);
    m_opt_in_level_isSet = !json[QString("opt_in_level")].isNull() && m_opt_in_level_isValid;
}

QString OAICustomerAdd_consents_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerAdd_consents_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_opt_in_level_isSet) {
        obj.insert(QString("opt_in_level"), ::OpenAPI::toJsonValue(m_opt_in_level));
    }
    return obj;
}

QString OAICustomerAdd_consents_inner::getType() const {
    return m_type;
}
void OAICustomerAdd_consents_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomerAdd_consents_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomerAdd_consents_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomerAdd_consents_inner::getStatus() const {
    return m_status;
}
void OAICustomerAdd_consents_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerAdd_consents_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerAdd_consents_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICustomerAdd_consents_inner::getOptInLevel() const {
    return m_opt_in_level;
}
void OAICustomerAdd_consents_inner::setOptInLevel(const QString &opt_in_level) {
    m_opt_in_level = opt_in_level;
    m_opt_in_level_isSet = true;
}

bool OAICustomerAdd_consents_inner::is_opt_in_level_Set() const{
    return m_opt_in_level_isSet;
}

bool OAICustomerAdd_consents_inner::is_opt_in_level_Valid() const{
    return m_opt_in_level_isValid;
}

bool OAICustomerAdd_consents_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerAdd_consents_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_status_isValid && m_opt_in_level_isValid && true;
}

} // namespace OpenAPI
