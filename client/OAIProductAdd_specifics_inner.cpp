/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductAdd_specifics_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductAdd_specifics_inner::OAIProductAdd_specifics_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductAdd_specifics_inner::OAIProductAdd_specifics_inner() {
    this->initializeModel();
}

OAIProductAdd_specifics_inner::~OAIProductAdd_specifics_inner() {}

void OAIProductAdd_specifics_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_used_for_variations_isSet = false;
    m_used_for_variations_isValid = false;

    m_scale_id_isSet = false;
    m_scale_id_isValid = false;

    m_input_value_isSet = false;
    m_input_value_isValid = false;

    m_food_details_isSet = false;
    m_food_details_isValid = false;

    m_group_products_details_isSet = false;
    m_group_products_details_isValid = false;

    m_booking_details_isSet = false;
    m_booking_details_isValid = false;
}

void OAIProductAdd_specifics_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductAdd_specifics_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_used_for_variations_isValid = ::OpenAPI::fromJsonValue(m_used_for_variations, json[QString("used_for_variations")]);
    m_used_for_variations_isSet = !json[QString("used_for_variations")].isNull() && m_used_for_variations_isValid;

    m_scale_id_isValid = ::OpenAPI::fromJsonValue(m_scale_id, json[QString("scale_id")]);
    m_scale_id_isSet = !json[QString("scale_id")].isNull() && m_scale_id_isValid;

    m_input_value_isValid = ::OpenAPI::fromJsonValue(m_input_value, json[QString("input_value")]);
    m_input_value_isSet = !json[QString("input_value")].isNull() && m_input_value_isValid;

    m_food_details_isValid = ::OpenAPI::fromJsonValue(m_food_details, json[QString("food_details")]);
    m_food_details_isSet = !json[QString("food_details")].isNull() && m_food_details_isValid;

    m_group_products_details_isValid = ::OpenAPI::fromJsonValue(m_group_products_details, json[QString("group_products_details")]);
    m_group_products_details_isSet = !json[QString("group_products_details")].isNull() && m_group_products_details_isValid;

    m_booking_details_isValid = ::OpenAPI::fromJsonValue(m_booking_details, json[QString("booking_details")]);
    m_booking_details_isSet = !json[QString("booking_details")].isNull() && m_booking_details_isValid;
}

QString OAIProductAdd_specifics_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductAdd_specifics_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_used_for_variations_isSet) {
        obj.insert(QString("used_for_variations"), ::OpenAPI::toJsonValue(m_used_for_variations));
    }
    if (m_scale_id_isSet) {
        obj.insert(QString("scale_id"), ::OpenAPI::toJsonValue(m_scale_id));
    }
    if (m_input_value_isSet) {
        obj.insert(QString("input_value"), ::OpenAPI::toJsonValue(m_input_value));
    }
    if (m_food_details.isSet()) {
        obj.insert(QString("food_details"), ::OpenAPI::toJsonValue(m_food_details));
    }
    if (m_group_products_details.size() > 0) {
        obj.insert(QString("group_products_details"), ::OpenAPI::toJsonValue(m_group_products_details));
    }
    if (m_booking_details.isSet()) {
        obj.insert(QString("booking_details"), ::OpenAPI::toJsonValue(m_booking_details));
    }
    return obj;
}

QString OAIProductAdd_specifics_inner::getName() const {
    return m_name;
}
void OAIProductAdd_specifics_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductAdd_specifics_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProductAdd_specifics_inner::getValue() const {
    return m_value;
}
void OAIProductAdd_specifics_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIProductAdd_specifics_inner::is_value_Valid() const{
    return m_value_isValid;
}

QList<QString> OAIProductAdd_specifics_inner::getValues() const {
    return m_values;
}
void OAIProductAdd_specifics_inner::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_values_Set() const{
    return m_values_isSet;
}

bool OAIProductAdd_specifics_inner::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIProductAdd_specifics_inner::isUsedForVariations() const {
    return m_used_for_variations;
}
void OAIProductAdd_specifics_inner::setUsedForVariations(const bool &used_for_variations) {
    m_used_for_variations = used_for_variations;
    m_used_for_variations_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_used_for_variations_Set() const{
    return m_used_for_variations_isSet;
}

bool OAIProductAdd_specifics_inner::is_used_for_variations_Valid() const{
    return m_used_for_variations_isValid;
}

qint32 OAIProductAdd_specifics_inner::getScaleId() const {
    return m_scale_id;
}
void OAIProductAdd_specifics_inner::setScaleId(const qint32 &scale_id) {
    m_scale_id = scale_id;
    m_scale_id_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_scale_id_Set() const{
    return m_scale_id_isSet;
}

bool OAIProductAdd_specifics_inner::is_scale_id_Valid() const{
    return m_scale_id_isValid;
}

QString OAIProductAdd_specifics_inner::getInputValue() const {
    return m_input_value;
}
void OAIProductAdd_specifics_inner::setInputValue(const QString &input_value) {
    m_input_value = input_value;
    m_input_value_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_input_value_Set() const{
    return m_input_value_isSet;
}

bool OAIProductAdd_specifics_inner::is_input_value_Valid() const{
    return m_input_value_isValid;
}

OAIProductAdd_specifics_inner_food_details OAIProductAdd_specifics_inner::getFoodDetails() const {
    return m_food_details;
}
void OAIProductAdd_specifics_inner::setFoodDetails(const OAIProductAdd_specifics_inner_food_details &food_details) {
    m_food_details = food_details;
    m_food_details_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_food_details_Set() const{
    return m_food_details_isSet;
}

bool OAIProductAdd_specifics_inner::is_food_details_Valid() const{
    return m_food_details_isValid;
}

QList<OAIProductAdd_specifics_inner_group_products_details_inner> OAIProductAdd_specifics_inner::getGroupProductsDetails() const {
    return m_group_products_details;
}
void OAIProductAdd_specifics_inner::setGroupProductsDetails(const QList<OAIProductAdd_specifics_inner_group_products_details_inner> &group_products_details) {
    m_group_products_details = group_products_details;
    m_group_products_details_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_group_products_details_Set() const{
    return m_group_products_details_isSet;
}

bool OAIProductAdd_specifics_inner::is_group_products_details_Valid() const{
    return m_group_products_details_isValid;
}

OAIProductAdd_specifics_inner_booking_details OAIProductAdd_specifics_inner::getBookingDetails() const {
    return m_booking_details;
}
void OAIProductAdd_specifics_inner::setBookingDetails(const OAIProductAdd_specifics_inner_booking_details &booking_details) {
    m_booking_details = booking_details;
    m_booking_details_isSet = true;
}

bool OAIProductAdd_specifics_inner::is_booking_details_Set() const{
    return m_booking_details_isSet;
}

bool OAIProductAdd_specifics_inner::is_booking_details_Valid() const{
    return m_booking_details_isValid;
}

bool OAIProductAdd_specifics_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_for_variations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_products_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductAdd_specifics_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
