/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryAddBatch_payload_inner_images_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryAddBatch_payload_inner_images_inner::OAICategoryAddBatch_payload_inner_images_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryAddBatch_payload_inner_images_inner::OAICategoryAddBatch_payload_inner_images_inner() {
    this->initializeModel();
}

OAICategoryAddBatch_payload_inner_images_inner::~OAICategoryAddBatch_payload_inner_images_inner() {}

void OAICategoryAddBatch_payload_inner_images_inner::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAICategoryAddBatch_payload_inner_images_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryAddBatch_payload_inner_images_inner::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("image_name")]);
    m_image_name_isSet = !json[QString("image_name")].isNull() && m_image_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAICategoryAddBatch_payload_inner_images_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryAddBatch_payload_inner_images_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("image_name"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAICategoryAddBatch_payload_inner_images_inner::getUrl() const {
    return m_url;
}
void OAICategoryAddBatch_payload_inner_images_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICategoryAddBatch_payload_inner_images_inner::getImageName() const {
    return m_image_name;
}
void OAICategoryAddBatch_payload_inner_images_inner::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAICategoryAddBatch_payload_inner_images_inner::getType() const {
    return m_type;
}
void OAICategoryAddBatch_payload_inner_images_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICategoryAddBatch_payload_inner_images_inner::getLabel() const {
    return m_label;
}
void OAICategoryAddBatch_payload_inner_images_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAICategoryAddBatch_payload_inner_images_inner::is_label_Valid() const{
    return m_label_isValid;
}

bool OAICategoryAddBatch_payload_inner_images_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryAddBatch_payload_inner_images_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
