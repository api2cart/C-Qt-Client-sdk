/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductOptionAdd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductOptionAdd::OAIProductOptionAdd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductOptionAdd::OAIProductOptionAdd() {
    this->initializeModel();
}

OAIProductOptionAdd::~OAIProductOptionAdd() {}

void OAIProductOptionAdd::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_default_option_value_isSet = false;
    m_default_option_value_isValid = false;

    m_option_values_isSet = false;
    m_option_values_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_avail_isSet = false;
    m_avail_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_clear_cache_isSet = false;
    m_clear_cache_isValid = false;
}

void OAIProductOptionAdd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductOptionAdd::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_default_option_value_isValid = ::OpenAPI::fromJsonValue(m_default_option_value, json[QString("default_option_value")]);
    m_default_option_value_isSet = !json[QString("default_option_value")].isNull() && m_default_option_value_isValid;

    m_option_values_isValid = ::OpenAPI::fromJsonValue(m_option_values, json[QString("option_values")]);
    m_option_values_isSet = !json[QString("option_values")].isNull() && m_option_values_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_avail_isValid = ::OpenAPI::fromJsonValue(m_avail, json[QString("avail")]);
    m_avail_isSet = !json[QString("avail")].isNull() && m_avail_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_clear_cache_isValid = ::OpenAPI::fromJsonValue(m_clear_cache, json[QString("clear_cache")]);
    m_clear_cache_isSet = !json[QString("clear_cache")].isNull() && m_clear_cache_isValid;
}

QString OAIProductOptionAdd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductOptionAdd::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_default_option_value_isSet) {
        obj.insert(QString("default_option_value"), ::OpenAPI::toJsonValue(m_default_option_value));
    }
    if (m_option_values_isSet) {
        obj.insert(QString("option_values"), ::OpenAPI::toJsonValue(m_option_values));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_avail_isSet) {
        obj.insert(QString("avail"), ::OpenAPI::toJsonValue(m_avail));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_clear_cache_isSet) {
        obj.insert(QString("clear_cache"), ::OpenAPI::toJsonValue(m_clear_cache));
    }
    return obj;
}

QString OAIProductOptionAdd::getName() const {
    return m_name;
}
void OAIProductOptionAdd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductOptionAdd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductOptionAdd::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProductOptionAdd::getType() const {
    return m_type;
}
void OAIProductOptionAdd::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductOptionAdd::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductOptionAdd::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProductOptionAdd::getProductId() const {
    return m_product_id;
}
void OAIProductOptionAdd::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductOptionAdd::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductOptionAdd::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductOptionAdd::getDefaultOptionValue() const {
    return m_default_option_value;
}
void OAIProductOptionAdd::setDefaultOptionValue(const QString &default_option_value) {
    m_default_option_value = default_option_value;
    m_default_option_value_isSet = true;
}

bool OAIProductOptionAdd::is_default_option_value_Set() const{
    return m_default_option_value_isSet;
}

bool OAIProductOptionAdd::is_default_option_value_Valid() const{
    return m_default_option_value_isValid;
}

QString OAIProductOptionAdd::getOptionValues() const {
    return m_option_values;
}
void OAIProductOptionAdd::setOptionValues(const QString &option_values) {
    m_option_values = option_values;
    m_option_values_isSet = true;
}

bool OAIProductOptionAdd::is_option_values_Set() const{
    return m_option_values_isSet;
}

bool OAIProductOptionAdd::is_option_values_Valid() const{
    return m_option_values_isValid;
}

QString OAIProductOptionAdd::getDescription() const {
    return m_description;
}
void OAIProductOptionAdd::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductOptionAdd::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductOptionAdd::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProductOptionAdd::isAvail() const {
    return m_avail;
}
void OAIProductOptionAdd::setAvail(const bool &avail) {
    m_avail = avail;
    m_avail_isSet = true;
}

bool OAIProductOptionAdd::is_avail_Set() const{
    return m_avail_isSet;
}

bool OAIProductOptionAdd::is_avail_Valid() const{
    return m_avail_isValid;
}

qint32 OAIProductOptionAdd::getSortOrder() const {
    return m_sort_order;
}
void OAIProductOptionAdd::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIProductOptionAdd::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIProductOptionAdd::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIProductOptionAdd::isRequired() const {
    return m_required;
}
void OAIProductOptionAdd::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIProductOptionAdd::is_required_Set() const{
    return m_required_isSet;
}

bool OAIProductOptionAdd::is_required_Valid() const{
    return m_required_isValid;
}

QList<OAIProductOptionAdd_values_inner> OAIProductOptionAdd::getValues() const {
    return m_values;
}
void OAIProductOptionAdd::setValues(const QList<OAIProductOptionAdd_values_inner> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIProductOptionAdd::is_values_Set() const{
    return m_values_isSet;
}

bool OAIProductOptionAdd::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIProductOptionAdd::isClearCache() const {
    return m_clear_cache;
}
void OAIProductOptionAdd::setClearCache(const bool &clear_cache) {
    m_clear_cache = clear_cache;
    m_clear_cache_isSet = true;
}

bool OAIProductOptionAdd::is_clear_cache_Set() const{
    return m_clear_cache_isSet;
}

bool OAIProductOptionAdd::is_clear_cache_Valid() const{
    return m_clear_cache_isValid;
}

bool OAIProductOptionAdd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_option_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_cache_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductOptionAdd::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
