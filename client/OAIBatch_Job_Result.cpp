/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch_Job_Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch_Job_Result::OAIBatch_Job_Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch_Job_Result::OAIBatch_Job_Result() {
    this->initializeModel();
}

OAIBatch_Job_Result::~OAIBatch_Job_Result() {}

void OAIBatch_Job_Result::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_items_processed_isSet = false;
    m_items_processed_isValid = false;

    m_items_succeed_isSet = false;
    m_items_succeed_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAIBatch_Job_Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch_Job_Result::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("job_id")]);
    m_job_id_isSet = !json[QString("job_id")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("job_name")]);
    m_job_name_isSet = !json[QString("job_name")].isNull() && m_job_name_isValid;

    m_items_processed_isValid = ::OpenAPI::fromJsonValue(m_items_processed, json[QString("items_processed")]);
    m_items_processed_isSet = !json[QString("items_processed")].isNull() && m_items_processed_isValid;

    m_items_succeed_isValid = ::OpenAPI::fromJsonValue(m_items_succeed, json[QString("items_succeed")]);
    m_items_succeed_isSet = !json[QString("items_succeed")].isNull() && m_items_succeed_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAIBatch_Job_Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch_Job_Result::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("job_id"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("job_name"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_items_processed_isSet) {
        obj.insert(QString("items_processed"), ::OpenAPI::toJsonValue(m_items_processed));
    }
    if (m_items_succeed_isSet) {
        obj.insert(QString("items_succeed"), ::OpenAPI::toJsonValue(m_items_succeed));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

qint32 OAIBatch_Job_Result::getJobId() const {
    return m_job_id;
}
void OAIBatch_Job_Result::setJobId(const qint32 &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIBatch_Job_Result::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIBatch_Job_Result::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIBatch_Job_Result::getJobName() const {
    return m_job_name;
}
void OAIBatch_Job_Result::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIBatch_Job_Result::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIBatch_Job_Result::is_job_name_Valid() const{
    return m_job_name_isValid;
}

qint32 OAIBatch_Job_Result::getItemsProcessed() const {
    return m_items_processed;
}
void OAIBatch_Job_Result::setItemsProcessed(const qint32 &items_processed) {
    m_items_processed = items_processed;
    m_items_processed_isSet = true;
}

bool OAIBatch_Job_Result::is_items_processed_Set() const{
    return m_items_processed_isSet;
}

bool OAIBatch_Job_Result::is_items_processed_Valid() const{
    return m_items_processed_isValid;
}

qint32 OAIBatch_Job_Result::getItemsSucceed() const {
    return m_items_succeed;
}
void OAIBatch_Job_Result::setItemsSucceed(const qint32 &items_succeed) {
    m_items_succeed = items_succeed;
    m_items_succeed_isSet = true;
}

bool OAIBatch_Job_Result::is_items_succeed_Set() const{
    return m_items_succeed_isSet;
}

bool OAIBatch_Job_Result::is_items_succeed_Valid() const{
    return m_items_succeed_isValid;
}

QList<OAIBatch_Job_Result_Item> OAIBatch_Job_Result::getItems() const {
    return m_items;
}
void OAIBatch_Job_Result::setItems(const QList<OAIBatch_Job_Result_Item> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIBatch_Job_Result::is_items_Set() const{
    return m_items_isSet;
}

bool OAIBatch_Job_Result::is_items_Valid() const{
    return m_items_isValid;
}

OAIObject OAIBatch_Job_Result::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIBatch_Job_Result::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIBatch_Job_Result::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIBatch_Job_Result::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAIBatch_Job_Result::getCustomFields() const {
    return m_custom_fields;
}
void OAIBatch_Job_Result::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIBatch_Job_Result::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIBatch_Job_Result::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIBatch_Job_Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_succeed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch_Job_Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
