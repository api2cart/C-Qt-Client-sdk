/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder_Calculate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder_Calculate::OAIOrder_Calculate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder_Calculate::OAIOrder_Calculate() {
    this->initializeModel();
}

OAIOrder_Calculate::~OAIOrder_Calculate() {}

void OAIOrder_Calculate::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_shipping_rates_isSet = false;
    m_shipping_rates_isValid = false;

    m_tax_lines_isSet = false;
    m_tax_lines_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAIOrder_Calculate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder_Calculate::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_shipping_rates_isValid = ::OpenAPI::fromJsonValue(m_shipping_rates, json[QString("shipping_rates")]);
    m_shipping_rates_isSet = !json[QString("shipping_rates")].isNull() && m_shipping_rates_isValid;

    m_tax_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_lines, json[QString("tax_lines")]);
    m_tax_lines_isSet = !json[QString("tax_lines")].isNull() && m_tax_lines_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAIOrder_Calculate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder_Calculate::asJsonObject() const {
    QJsonObject obj;
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_subtotal.isSet()) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_shipping_rates.size() > 0) {
        obj.insert(QString("shipping_rates"), ::OpenAPI::toJsonValue(m_shipping_rates));
    }
    if (m_tax_lines.size() > 0) {
        obj.insert(QString("tax_lines"), ::OpenAPI::toJsonValue(m_tax_lines));
    }
    if (m_discounts.size() > 0) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

OAIBaseCustomer OAIOrder_Calculate::getCustomer() const {
    return m_customer;
}
void OAIOrder_Calculate::setCustomer(const OAIBaseCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIOrder_Calculate::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIOrder_Calculate::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIOrder_Calculate_Subtotal OAIOrder_Calculate::getSubtotal() const {
    return m_subtotal;
}
void OAIOrder_Calculate::setSubtotal(const OAIOrder_Calculate_Subtotal &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIOrder_Calculate::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIOrder_Calculate::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

QList<OAIOrder_Calculate_Item> OAIOrder_Calculate::getItems() const {
    return m_items;
}
void OAIOrder_Calculate::setItems(const QList<OAIOrder_Calculate_Item> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrder_Calculate::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrder_Calculate::is_items_Valid() const{
    return m_items_isValid;
}

OAICurrency OAIOrder_Calculate::getCurrency() const {
    return m_currency;
}
void OAIOrder_Calculate::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrder_Calculate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrder_Calculate::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAIOrder_Calculate_ShippingRate> OAIOrder_Calculate::getShippingRates() const {
    return m_shipping_rates;
}
void OAIOrder_Calculate::setShippingRates(const QList<OAIOrder_Calculate_ShippingRate> &shipping_rates) {
    m_shipping_rates = shipping_rates;
    m_shipping_rates_isSet = true;
}

bool OAIOrder_Calculate::is_shipping_rates_Set() const{
    return m_shipping_rates_isSet;
}

bool OAIOrder_Calculate::is_shipping_rates_Valid() const{
    return m_shipping_rates_isValid;
}

QList<OAIOrder_Calculate_Tax> OAIOrder_Calculate::getTaxLines() const {
    return m_tax_lines;
}
void OAIOrder_Calculate::setTaxLines(const QList<OAIOrder_Calculate_Tax> &tax_lines) {
    m_tax_lines = tax_lines;
    m_tax_lines_isSet = true;
}

bool OAIOrder_Calculate::is_tax_lines_Set() const{
    return m_tax_lines_isSet;
}

bool OAIOrder_Calculate::is_tax_lines_Valid() const{
    return m_tax_lines_isValid;
}

QList<OAIOrder_Calculate_Discount> OAIOrder_Calculate::getDiscounts() const {
    return m_discounts;
}
void OAIOrder_Calculate::setDiscounts(const QList<OAIOrder_Calculate_Discount> &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIOrder_Calculate::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIOrder_Calculate::is_discounts_Valid() const{
    return m_discounts_isValid;
}

OAIObject OAIOrder_Calculate::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIOrder_Calculate::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIOrder_Calculate::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIOrder_Calculate::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAIOrder_Calculate::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrder_Calculate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrder_Calculate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrder_Calculate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIOrder_Calculate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder_Calculate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
