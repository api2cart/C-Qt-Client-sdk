/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderReturnUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderReturnUpdate::OAIOrderReturnUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderReturnUpdate::OAIOrderReturnUpdate() {
    this->initializeModel();
}

OAIOrderReturnUpdate::~OAIOrderReturnUpdate() {}

void OAIOrderReturnUpdate::initializeModel() {

    m_return_id_isSet = false;
    m_return_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_item_restock_isSet = false;
    m_item_restock_isValid = false;

    m_return_status_id_isSet = false;
    m_return_status_id_isValid = false;

    m_staff_note_isSet = false;
    m_staff_note_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_send_notifications_isSet = false;
    m_send_notifications_isValid = false;

    m_reject_reason_isSet = false;
    m_reject_reason_isValid = false;

    m_order_products_isSet = false;
    m_order_products_isValid = false;
}

void OAIOrderReturnUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderReturnUpdate::fromJsonObject(QJsonObject json) {

    m_return_id_isValid = ::OpenAPI::fromJsonValue(m_return_id, json[QString("return_id")]);
    m_return_id_isSet = !json[QString("return_id")].isNull() && m_return_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_item_restock_isValid = ::OpenAPI::fromJsonValue(m_item_restock, json[QString("item_restock")]);
    m_item_restock_isSet = !json[QString("item_restock")].isNull() && m_item_restock_isValid;

    m_return_status_id_isValid = ::OpenAPI::fromJsonValue(m_return_status_id, json[QString("return_status_id")]);
    m_return_status_id_isSet = !json[QString("return_status_id")].isNull() && m_return_status_id_isValid;

    m_staff_note_isValid = ::OpenAPI::fromJsonValue(m_staff_note, json[QString("staff_note")]);
    m_staff_note_isSet = !json[QString("staff_note")].isNull() && m_staff_note_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_send_notifications_isValid = ::OpenAPI::fromJsonValue(m_send_notifications, json[QString("send_notifications")]);
    m_send_notifications_isSet = !json[QString("send_notifications")].isNull() && m_send_notifications_isValid;

    m_reject_reason_isValid = ::OpenAPI::fromJsonValue(m_reject_reason, json[QString("reject_reason")]);
    m_reject_reason_isSet = !json[QString("reject_reason")].isNull() && m_reject_reason_isValid;

    m_order_products_isValid = ::OpenAPI::fromJsonValue(m_order_products, json[QString("order_products")]);
    m_order_products_isSet = !json[QString("order_products")].isNull() && m_order_products_isValid;
}

QString OAIOrderReturnUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderReturnUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_return_id_isSet) {
        obj.insert(QString("return_id"), ::OpenAPI::toJsonValue(m_return_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_item_restock_isSet) {
        obj.insert(QString("item_restock"), ::OpenAPI::toJsonValue(m_item_restock));
    }
    if (m_return_status_id_isSet) {
        obj.insert(QString("return_status_id"), ::OpenAPI::toJsonValue(m_return_status_id));
    }
    if (m_staff_note_isSet) {
        obj.insert(QString("staff_note"), ::OpenAPI::toJsonValue(m_staff_note));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_send_notifications_isSet) {
        obj.insert(QString("send_notifications"), ::OpenAPI::toJsonValue(m_send_notifications));
    }
    if (m_reject_reason_isSet) {
        obj.insert(QString("reject_reason"), ::OpenAPI::toJsonValue(m_reject_reason));
    }
    if (m_order_products.size() > 0) {
        obj.insert(QString("order_products"), ::OpenAPI::toJsonValue(m_order_products));
    }
    return obj;
}

QString OAIOrderReturnUpdate::getReturnId() const {
    return m_return_id;
}
void OAIOrderReturnUpdate::setReturnId(const QString &return_id) {
    m_return_id = return_id;
    m_return_id_isSet = true;
}

bool OAIOrderReturnUpdate::is_return_id_Set() const{
    return m_return_id_isSet;
}

bool OAIOrderReturnUpdate::is_return_id_Valid() const{
    return m_return_id_isValid;
}

QString OAIOrderReturnUpdate::getOrderId() const {
    return m_order_id;
}
void OAIOrderReturnUpdate::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderReturnUpdate::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderReturnUpdate::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIOrderReturnUpdate::getStoreId() const {
    return m_store_id;
}
void OAIOrderReturnUpdate::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIOrderReturnUpdate::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIOrderReturnUpdate::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIOrderReturnUpdate::isItemRestock() const {
    return m_item_restock;
}
void OAIOrderReturnUpdate::setItemRestock(const bool &item_restock) {
    m_item_restock = item_restock;
    m_item_restock_isSet = true;
}

bool OAIOrderReturnUpdate::is_item_restock_Set() const{
    return m_item_restock_isSet;
}

bool OAIOrderReturnUpdate::is_item_restock_Valid() const{
    return m_item_restock_isValid;
}

QString OAIOrderReturnUpdate::getReturnStatusId() const {
    return m_return_status_id;
}
void OAIOrderReturnUpdate::setReturnStatusId(const QString &return_status_id) {
    m_return_status_id = return_status_id;
    m_return_status_id_isSet = true;
}

bool OAIOrderReturnUpdate::is_return_status_id_Set() const{
    return m_return_status_id_isSet;
}

bool OAIOrderReturnUpdate::is_return_status_id_Valid() const{
    return m_return_status_id_isValid;
}

QString OAIOrderReturnUpdate::getStaffNote() const {
    return m_staff_note;
}
void OAIOrderReturnUpdate::setStaffNote(const QString &staff_note) {
    m_staff_note = staff_note;
    m_staff_note_isSet = true;
}

bool OAIOrderReturnUpdate::is_staff_note_Set() const{
    return m_staff_note_isSet;
}

bool OAIOrderReturnUpdate::is_staff_note_Valid() const{
    return m_staff_note_isValid;
}

QString OAIOrderReturnUpdate::getComment() const {
    return m_comment;
}
void OAIOrderReturnUpdate::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIOrderReturnUpdate::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIOrderReturnUpdate::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIOrderReturnUpdate::isSendNotifications() const {
    return m_send_notifications;
}
void OAIOrderReturnUpdate::setSendNotifications(const bool &send_notifications) {
    m_send_notifications = send_notifications;
    m_send_notifications_isSet = true;
}

bool OAIOrderReturnUpdate::is_send_notifications_Set() const{
    return m_send_notifications_isSet;
}

bool OAIOrderReturnUpdate::is_send_notifications_Valid() const{
    return m_send_notifications_isValid;
}

QString OAIOrderReturnUpdate::getRejectReason() const {
    return m_reject_reason;
}
void OAIOrderReturnUpdate::setRejectReason(const QString &reject_reason) {
    m_reject_reason = reject_reason;
    m_reject_reason_isSet = true;
}

bool OAIOrderReturnUpdate::is_reject_reason_Set() const{
    return m_reject_reason_isSet;
}

bool OAIOrderReturnUpdate::is_reject_reason_Valid() const{
    return m_reject_reason_isValid;
}

QList<OAIOrderReturnUpdate_order_products_inner> OAIOrderReturnUpdate::getOrderProducts() const {
    return m_order_products;
}
void OAIOrderReturnUpdate::setOrderProducts(const QList<OAIOrderReturnUpdate_order_products_inner> &order_products) {
    m_order_products = order_products;
    m_order_products_isSet = true;
}

bool OAIOrderReturnUpdate::is_order_products_Set() const{
    return m_order_products_isSet;
}

bool OAIOrderReturnUpdate::is_order_products_Valid() const{
    return m_order_products_isValid;
}

bool OAIOrderReturnUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_restock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderReturnUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_return_id_isValid && m_order_products_isValid && true;
}

} // namespace OpenAPI
