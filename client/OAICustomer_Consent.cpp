/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer_Consent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer_Consent::OAICustomer_Consent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer_Consent::OAICustomer_Consent() {
    this->initializeModel();
}

OAICustomer_Consent::~OAICustomer_Consent() {}

void OAICustomer_Consent::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_opt_in_level_isSet = false;
    m_opt_in_level_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAICustomer_Consent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer_Consent::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_opt_in_level_isValid = ::OpenAPI::fromJsonValue(m_opt_in_level, json[QString("opt_in_level")]);
    m_opt_in_level_isSet = !json[QString("opt_in_level")].isNull() && m_opt_in_level_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAICustomer_Consent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer_Consent::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_opt_in_level_isSet) {
        obj.insert(QString("opt_in_level"), ::OpenAPI::toJsonValue(m_opt_in_level));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

QString OAICustomer_Consent::getId() const {
    return m_id;
}
void OAICustomer_Consent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer_Consent::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer_Consent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer_Consent::getType() const {
    return m_type;
}
void OAICustomer_Consent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomer_Consent::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomer_Consent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomer_Consent::getStatus() const {
    return m_status;
}
void OAICustomer_Consent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomer_Consent::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomer_Consent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICustomer_Consent::getSource() const {
    return m_source;
}
void OAICustomer_Consent::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICustomer_Consent::is_source_Set() const{
    return m_source_isSet;
}

bool OAICustomer_Consent::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICustomer_Consent::getOptInLevel() const {
    return m_opt_in_level;
}
void OAICustomer_Consent::setOptInLevel(const QString &opt_in_level) {
    m_opt_in_level = opt_in_level;
    m_opt_in_level_isSet = true;
}

bool OAICustomer_Consent::is_opt_in_level_Set() const{
    return m_opt_in_level_isSet;
}

bool OAICustomer_Consent::is_opt_in_level_Valid() const{
    return m_opt_in_level_isValid;
}

QString OAICustomer_Consent::getModifiedTime() const {
    return m_modified_time;
}
void OAICustomer_Consent::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAICustomer_Consent::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAICustomer_Consent::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

OAIObject OAICustomer_Consent::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICustomer_Consent::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICustomer_Consent::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICustomer_Consent::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAICustomer_Consent::getCustomFields() const {
    return m_custom_fields;
}
void OAICustomer_Consent::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICustomer_Consent::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICustomer_Consent::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAICustomer_Consent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer_Consent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
