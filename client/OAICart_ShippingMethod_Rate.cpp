/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart_ShippingMethod_Rate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart_ShippingMethod_Rate::OAICart_ShippingMethod_Rate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart_ShippingMethod_Rate::OAICart_ShippingMethod_Rate() {
    this->initializeModel();
}

OAICart_ShippingMethod_Rate::~OAICart_ShippingMethod_Rate() {}

void OAICart_ShippingMethod_Rate::initializeModel() {

    m_min_weight_isSet = false;
    m_min_weight_isValid = false;

    m_max_weight_isSet = false;
    m_max_weight_isValid = false;

    m_min_order_amount_isSet = false;
    m_min_order_amount_isValid = false;

    m_max_order_amount_isSet = false;
    m_max_order_amount_isValid = false;

    m_min_items_count_isSet = false;
    m_min_items_count_isValid = false;

    m_max_items_count_isSet = false;
    m_max_items_count_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAICart_ShippingMethod_Rate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart_ShippingMethod_Rate::fromJsonObject(QJsonObject json) {

    m_min_weight_isValid = ::OpenAPI::fromJsonValue(m_min_weight, json[QString("min_weight")]);
    m_min_weight_isSet = !json[QString("min_weight")].isNull() && m_min_weight_isValid;

    m_max_weight_isValid = ::OpenAPI::fromJsonValue(m_max_weight, json[QString("max_weight")]);
    m_max_weight_isSet = !json[QString("max_weight")].isNull() && m_max_weight_isValid;

    m_min_order_amount_isValid = ::OpenAPI::fromJsonValue(m_min_order_amount, json[QString("min_order_amount")]);
    m_min_order_amount_isSet = !json[QString("min_order_amount")].isNull() && m_min_order_amount_isValid;

    m_max_order_amount_isValid = ::OpenAPI::fromJsonValue(m_max_order_amount, json[QString("max_order_amount")]);
    m_max_order_amount_isSet = !json[QString("max_order_amount")].isNull() && m_max_order_amount_isValid;

    m_min_items_count_isValid = ::OpenAPI::fromJsonValue(m_min_items_count, json[QString("min_items_count")]);
    m_min_items_count_isSet = !json[QString("min_items_count")].isNull() && m_min_items_count_isValid;

    m_max_items_count_isValid = ::OpenAPI::fromJsonValue(m_max_items_count, json[QString("max_items_count")]);
    m_max_items_count_isSet = !json[QString("max_items_count")].isNull() && m_max_items_count_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAICart_ShippingMethod_Rate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart_ShippingMethod_Rate::asJsonObject() const {
    QJsonObject obj;
    if (m_min_weight_isSet) {
        obj.insert(QString("min_weight"), ::OpenAPI::toJsonValue(m_min_weight));
    }
    if (m_max_weight_isSet) {
        obj.insert(QString("max_weight"), ::OpenAPI::toJsonValue(m_max_weight));
    }
    if (m_min_order_amount_isSet) {
        obj.insert(QString("min_order_amount"), ::OpenAPI::toJsonValue(m_min_order_amount));
    }
    if (m_max_order_amount_isSet) {
        obj.insert(QString("max_order_amount"), ::OpenAPI::toJsonValue(m_max_order_amount));
    }
    if (m_min_items_count_isSet) {
        obj.insert(QString("min_items_count"), ::OpenAPI::toJsonValue(m_min_items_count));
    }
    if (m_max_items_count_isSet) {
        obj.insert(QString("max_items_count"), ::OpenAPI::toJsonValue(m_max_items_count));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

QString OAICart_ShippingMethod_Rate::getMinWeight() const {
    return m_min_weight;
}
void OAICart_ShippingMethod_Rate::setMinWeight(const QString &min_weight) {
    m_min_weight = min_weight;
    m_min_weight_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_min_weight_Set() const{
    return m_min_weight_isSet;
}

bool OAICart_ShippingMethod_Rate::is_min_weight_Valid() const{
    return m_min_weight_isValid;
}

QString OAICart_ShippingMethod_Rate::getMaxWeight() const {
    return m_max_weight;
}
void OAICart_ShippingMethod_Rate::setMaxWeight(const QString &max_weight) {
    m_max_weight = max_weight;
    m_max_weight_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_max_weight_Set() const{
    return m_max_weight_isSet;
}

bool OAICart_ShippingMethod_Rate::is_max_weight_Valid() const{
    return m_max_weight_isValid;
}

QString OAICart_ShippingMethod_Rate::getMinOrderAmount() const {
    return m_min_order_amount;
}
void OAICart_ShippingMethod_Rate::setMinOrderAmount(const QString &min_order_amount) {
    m_min_order_amount = min_order_amount;
    m_min_order_amount_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_min_order_amount_Set() const{
    return m_min_order_amount_isSet;
}

bool OAICart_ShippingMethod_Rate::is_min_order_amount_Valid() const{
    return m_min_order_amount_isValid;
}

QString OAICart_ShippingMethod_Rate::getMaxOrderAmount() const {
    return m_max_order_amount;
}
void OAICart_ShippingMethod_Rate::setMaxOrderAmount(const QString &max_order_amount) {
    m_max_order_amount = max_order_amount;
    m_max_order_amount_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_max_order_amount_Set() const{
    return m_max_order_amount_isSet;
}

bool OAICart_ShippingMethod_Rate::is_max_order_amount_Valid() const{
    return m_max_order_amount_isValid;
}

QString OAICart_ShippingMethod_Rate::getMinItemsCount() const {
    return m_min_items_count;
}
void OAICart_ShippingMethod_Rate::setMinItemsCount(const QString &min_items_count) {
    m_min_items_count = min_items_count;
    m_min_items_count_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_min_items_count_Set() const{
    return m_min_items_count_isSet;
}

bool OAICart_ShippingMethod_Rate::is_min_items_count_Valid() const{
    return m_min_items_count_isValid;
}

QString OAICart_ShippingMethod_Rate::getMaxItemsCount() const {
    return m_max_items_count;
}
void OAICart_ShippingMethod_Rate::setMaxItemsCount(const QString &max_items_count) {
    m_max_items_count = max_items_count;
    m_max_items_count_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_max_items_count_Set() const{
    return m_max_items_count_isSet;
}

bool OAICart_ShippingMethod_Rate::is_max_items_count_Valid() const{
    return m_max_items_count_isValid;
}

QString OAICart_ShippingMethod_Rate::getPrice() const {
    return m_price;
}
void OAICart_ShippingMethod_Rate::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_price_Set() const{
    return m_price_isSet;
}

bool OAICart_ShippingMethod_Rate::is_price_Valid() const{
    return m_price_isValid;
}

OAIObject OAICart_ShippingMethod_Rate::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICart_ShippingMethod_Rate::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICart_ShippingMethod_Rate::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAICart_ShippingMethod_Rate::getCustomFields() const {
    return m_custom_fields;
}
void OAICart_ShippingMethod_Rate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICart_ShippingMethod_Rate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICart_ShippingMethod_Rate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAICart_ShippingMethod_Rate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_order_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart_ShippingMethod_Rate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
