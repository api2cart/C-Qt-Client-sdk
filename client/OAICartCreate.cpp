/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICartCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICartCreate::OAICartCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICartCreate::OAICartCreate() {
    this->initializeModel();
}

OAICartCreate::~OAICartCreate() {}

void OAICartCreate::initializeModel() {

    m_cart_id_isSet = false;
    m_cart_id_isValid = false;

    m_store_url_isSet = false;
    m_store_url_isValid = false;

    m_bridge_url_isSet = false;
    m_bridge_url_isValid = false;

    m_store_root_isSet = false;
    m_store_root_isValid = false;

    m_store_key_isSet = false;
    m_store_key_isValid = false;

    m_shared_secret_isSet = false;
    m_shared_secret_isValid = false;

    m_validate_version_isSet = false;
    m_validate_version_isValid = false;

    m_verify_isSet = false;
    m_verify_isValid = false;

    m_db_tables_prefix_isSet = false;
    m_db_tables_prefix_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_ftp_host_isSet = false;
    m_ftp_host_isValid = false;

    m_ftp_user_isSet = false;
    m_ftp_user_isValid = false;

    m_ftp_password_isSet = false;
    m_ftp_password_isValid = false;

    m_ftp_port_isSet = false;
    m_ftp_port_isValid = false;

    m_ftp_store_dir_isSet = false;
    m_ftp_store_dir_isValid = false;

    m_api_key_3dcart_isSet = false;
    m_api_key_3dcart_isValid = false;

    m_admin_account_isSet = false;
    m_admin_account_isValid = false;

    m_api_path_isSet = false;
    m_api_path_isValid = false;

    m_api_key_bigcommerce_isSet = false;
    m_api_key_bigcommerce_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_api_key_shopify_isSet = false;
    m_api_key_shopify_isValid = false;

    m_api_password_isSet = false;
    m_api_password_isValid = false;

    m_access_token_shopify_isSet = false;
    m_access_token_shopify_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_api_username_isSet = false;
    m_api_username_isValid = false;

    m_encrypted_password_isSet = false;
    m_encrypted_password_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_api_user_adnsf_isSet = false;
    m_api_user_adnsf_isValid = false;

    m_api_pass_isSet = false;
    m_api_pass_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_app_token_isSet = false;
    m_app_token_isValid = false;

    m_etsy_keystring_isSet = false;
    m_etsy_keystring_isValid = false;

    m_etsy_shared_secret_isSet = false;
    m_etsy_shared_secret_isValid = false;

    m_token_secret_isSet = false;
    m_token_secret_isValid = false;

    m_etsy_client_id_isSet = false;
    m_etsy_client_id_isValid = false;

    m_etsy_refresh_token_isSet = false;
    m_etsy_refresh_token_isValid = false;

    m_ebay_client_id_isSet = false;
    m_ebay_client_id_isValid = false;

    m_ebay_client_secret_isSet = false;
    m_ebay_client_secret_isValid = false;

    m_ebay_runame_isSet = false;
    m_ebay_runame_isValid = false;

    m_ebay_access_token_isSet = false;
    m_ebay_access_token_isValid = false;

    m_ebay_refresh_token_isSet = false;
    m_ebay_refresh_token_isValid = false;

    m_ebay_environment_isSet = false;
    m_ebay_environment_isValid = false;

    m_ebay_site_id_isSet = false;
    m_ebay_site_id_isValid = false;

    m_dw_client_id_isSet = false;
    m_dw_client_id_isValid = false;

    m_dw_api_pass_isSet = false;
    m_dw_api_pass_isValid = false;

    m_demandware_user_name_isSet = false;
    m_demandware_user_name_isValid = false;

    m_demandware_user_password_isSet = false;
    m_demandware_user_password_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_hybris_client_id_isSet = false;
    m_hybris_client_id_isValid = false;

    m_hybris_client_secret_isSet = false;
    m_hybris_client_secret_isValid = false;

    m_hybris_username_isSet = false;
    m_hybris_username_isValid = false;

    m_hybris_password_isSet = false;
    m_hybris_password_isValid = false;

    m_hybris_websites_isSet = false;
    m_hybris_websites_isValid = false;

    m_walmart_client_id_isSet = false;
    m_walmart_client_id_isValid = false;

    m_walmart_client_secret_isSet = false;
    m_walmart_client_secret_isValid = false;

    m_walmart_environment_isSet = false;
    m_walmart_environment_isValid = false;

    m_walmart_channel_type_isSet = false;
    m_walmart_channel_type_isValid = false;

    m_walmart_region_isSet = false;
    m_walmart_region_isValid = false;

    m_lightspeed_api_key_isSet = false;
    m_lightspeed_api_key_isValid = false;

    m_lightspeed_api_secret_isSet = false;
    m_lightspeed_api_secret_isValid = false;

    m_shoplazza_access_token_isSet = false;
    m_shoplazza_access_token_isValid = false;

    m_shoplazza_shared_secret_isSet = false;
    m_shoplazza_shared_secret_isValid = false;

    m_shopware_access_key_isSet = false;
    m_shopware_access_key_isValid = false;

    m_shopware_api_key_isSet = false;
    m_shopware_api_key_isValid = false;

    m_shopware_api_secret_isSet = false;
    m_shopware_api_secret_isValid = false;

    m_commercehq_api_key_isSet = false;
    m_commercehq_api_key_isValid = false;

    m_commercehq_api_password_isSet = false;
    m_commercehq_api_password_isValid = false;

    m_r_3dcart_private_key_isSet = false;
    m_r_3dcart_private_key_isValid = false;

    m_r_3dcart_access_token_isSet = false;
    m_r_3dcart_access_token_isValid = false;

    m_wc_consumer_key_isSet = false;
    m_wc_consumer_key_isValid = false;

    m_wc_consumer_secret_isSet = false;
    m_wc_consumer_secret_isValid = false;

    m_magento_consumer_key_isSet = false;
    m_magento_consumer_key_isValid = false;

    m_magento_consumer_secret_isSet = false;
    m_magento_consumer_secret_isValid = false;

    m_magento_access_token_isSet = false;
    m_magento_access_token_isValid = false;

    m_magento_token_secret_isSet = false;
    m_magento_token_secret_isValid = false;

    m_prestashop_webservice_key_isSet = false;
    m_prestashop_webservice_key_isValid = false;

    m_wix_app_id_isSet = false;
    m_wix_app_id_isValid = false;

    m_wix_app_secret_key_isSet = false;
    m_wix_app_secret_key_isValid = false;

    m_wix_instance_id_isSet = false;
    m_wix_instance_id_isValid = false;

    m_wix_refresh_token_isSet = false;
    m_wix_refresh_token_isValid = false;

    m_mercado_libre_app_id_isSet = false;
    m_mercado_libre_app_id_isValid = false;

    m_mercado_libre_app_secret_key_isSet = false;
    m_mercado_libre_app_secret_key_isValid = false;

    m_mercado_libre_refresh_token_isSet = false;
    m_mercado_libre_refresh_token_isValid = false;

    m_zid_client_id_isSet = false;
    m_zid_client_id_isValid = false;

    m_zid_client_secret_isSet = false;
    m_zid_client_secret_isValid = false;

    m_zid_access_token_isSet = false;
    m_zid_access_token_isValid = false;

    m_zid_authorization_isSet = false;
    m_zid_authorization_isValid = false;

    m_zid_refresh_token_isSet = false;
    m_zid_refresh_token_isValid = false;

    m_flipkart_client_id_isSet = false;
    m_flipkart_client_id_isValid = false;

    m_flipkart_client_secret_isSet = false;
    m_flipkart_client_secret_isValid = false;

    m_allegro_client_id_isSet = false;
    m_allegro_client_id_isValid = false;

    m_allegro_client_secret_isSet = false;
    m_allegro_client_secret_isValid = false;

    m_allegro_access_token_isSet = false;
    m_allegro_access_token_isValid = false;

    m_allegro_refresh_token_isSet = false;
    m_allegro_refresh_token_isValid = false;

    m_allegro_environment_isSet = false;
    m_allegro_environment_isValid = false;
}

void OAICartCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICartCreate::fromJsonObject(QJsonObject json) {

    m_cart_id_isValid = ::OpenAPI::fromJsonValue(m_cart_id, json[QString("cart_id")]);
    m_cart_id_isSet = !json[QString("cart_id")].isNull() && m_cart_id_isValid;

    m_store_url_isValid = ::OpenAPI::fromJsonValue(m_store_url, json[QString("store_url")]);
    m_store_url_isSet = !json[QString("store_url")].isNull() && m_store_url_isValid;

    m_bridge_url_isValid = ::OpenAPI::fromJsonValue(m_bridge_url, json[QString("bridge_url")]);
    m_bridge_url_isSet = !json[QString("bridge_url")].isNull() && m_bridge_url_isValid;

    m_store_root_isValid = ::OpenAPI::fromJsonValue(m_store_root, json[QString("store_root")]);
    m_store_root_isSet = !json[QString("store_root")].isNull() && m_store_root_isValid;

    m_store_key_isValid = ::OpenAPI::fromJsonValue(m_store_key, json[QString("store_key")]);
    m_store_key_isSet = !json[QString("store_key")].isNull() && m_store_key_isValid;

    m_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_shared_secret, json[QString("shared_secret")]);
    m_shared_secret_isSet = !json[QString("shared_secret")].isNull() && m_shared_secret_isValid;

    m_validate_version_isValid = ::OpenAPI::fromJsonValue(m_validate_version, json[QString("validate_version")]);
    m_validate_version_isSet = !json[QString("validate_version")].isNull() && m_validate_version_isValid;

    m_verify_isValid = ::OpenAPI::fromJsonValue(m_verify, json[QString("verify")]);
    m_verify_isSet = !json[QString("verify")].isNull() && m_verify_isValid;

    m_db_tables_prefix_isValid = ::OpenAPI::fromJsonValue(m_db_tables_prefix, json[QString("db_tables_prefix")]);
    m_db_tables_prefix_isSet = !json[QString("db_tables_prefix")].isNull() && m_db_tables_prefix_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_ftp_host_isValid = ::OpenAPI::fromJsonValue(m_ftp_host, json[QString("ftp_host")]);
    m_ftp_host_isSet = !json[QString("ftp_host")].isNull() && m_ftp_host_isValid;

    m_ftp_user_isValid = ::OpenAPI::fromJsonValue(m_ftp_user, json[QString("ftp_user")]);
    m_ftp_user_isSet = !json[QString("ftp_user")].isNull() && m_ftp_user_isValid;

    m_ftp_password_isValid = ::OpenAPI::fromJsonValue(m_ftp_password, json[QString("ftp_password")]);
    m_ftp_password_isSet = !json[QString("ftp_password")].isNull() && m_ftp_password_isValid;

    m_ftp_port_isValid = ::OpenAPI::fromJsonValue(m_ftp_port, json[QString("ftp_port")]);
    m_ftp_port_isSet = !json[QString("ftp_port")].isNull() && m_ftp_port_isValid;

    m_ftp_store_dir_isValid = ::OpenAPI::fromJsonValue(m_ftp_store_dir, json[QString("ftp_store_dir")]);
    m_ftp_store_dir_isSet = !json[QString("ftp_store_dir")].isNull() && m_ftp_store_dir_isValid;

    m_api_key_3dcart_isValid = ::OpenAPI::fromJsonValue(m_api_key_3dcart, json[QString("apiKey_3dcart")]);
    m_api_key_3dcart_isSet = !json[QString("apiKey_3dcart")].isNull() && m_api_key_3dcart_isValid;

    m_admin_account_isValid = ::OpenAPI::fromJsonValue(m_admin_account, json[QString("AdminAccount")]);
    m_admin_account_isSet = !json[QString("AdminAccount")].isNull() && m_admin_account_isValid;

    m_api_path_isValid = ::OpenAPI::fromJsonValue(m_api_path, json[QString("ApiPath")]);
    m_api_path_isSet = !json[QString("ApiPath")].isNull() && m_api_path_isValid;

    m_api_key_bigcommerce_isValid = ::OpenAPI::fromJsonValue(m_api_key_bigcommerce, json[QString("ApiKey_Bigcommerce")]);
    m_api_key_bigcommerce_isSet = !json[QString("ApiKey_Bigcommerce")].isNull() && m_api_key_bigcommerce_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_api_key_shopify_isValid = ::OpenAPI::fromJsonValue(m_api_key_shopify, json[QString("apiKey_shopify")]);
    m_api_key_shopify_isSet = !json[QString("apiKey_shopify")].isNull() && m_api_key_shopify_isValid;

    m_api_password_isValid = ::OpenAPI::fromJsonValue(m_api_password, json[QString("apiPassword")]);
    m_api_password_isSet = !json[QString("apiPassword")].isNull() && m_api_password_isValid;

    m_access_token_shopify_isValid = ::OpenAPI::fromJsonValue(m_access_token_shopify, json[QString("accessToken_shopify")]);
    m_access_token_shopify_isSet = !json[QString("accessToken_shopify")].isNull() && m_access_token_shopify_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_api_username_isValid = ::OpenAPI::fromJsonValue(m_api_username, json[QString("apiUsername")]);
    m_api_username_isSet = !json[QString("apiUsername")].isNull() && m_api_username_isValid;

    m_encrypted_password_isValid = ::OpenAPI::fromJsonValue(m_encrypted_password, json[QString("EncryptedPassword")]);
    m_encrypted_password_isSet = !json[QString("EncryptedPassword")].isNull() && m_encrypted_password_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("Login")]);
    m_login_isSet = !json[QString("Login")].isNull() && m_login_isValid;

    m_api_user_adnsf_isValid = ::OpenAPI::fromJsonValue(m_api_user_adnsf, json[QString("apiUser_adnsf")]);
    m_api_user_adnsf_isSet = !json[QString("apiUser_adnsf")].isNull() && m_api_user_adnsf_isValid;

    m_api_pass_isValid = ::OpenAPI::fromJsonValue(m_api_pass, json[QString("apiPass")]);
    m_api_pass_isSet = !json[QString("apiPass")].isNull() && m_api_pass_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("privateKey")]);
    m_private_key_isSet = !json[QString("privateKey")].isNull() && m_private_key_isValid;

    m_app_token_isValid = ::OpenAPI::fromJsonValue(m_app_token, json[QString("appToken")]);
    m_app_token_isSet = !json[QString("appToken")].isNull() && m_app_token_isValid;

    m_etsy_keystring_isValid = ::OpenAPI::fromJsonValue(m_etsy_keystring, json[QString("etsy_keystring")]);
    m_etsy_keystring_isSet = !json[QString("etsy_keystring")].isNull() && m_etsy_keystring_isValid;

    m_etsy_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_etsy_shared_secret, json[QString("etsy_shared_secret")]);
    m_etsy_shared_secret_isSet = !json[QString("etsy_shared_secret")].isNull() && m_etsy_shared_secret_isValid;

    m_token_secret_isValid = ::OpenAPI::fromJsonValue(m_token_secret, json[QString("tokenSecret")]);
    m_token_secret_isSet = !json[QString("tokenSecret")].isNull() && m_token_secret_isValid;

    m_etsy_client_id_isValid = ::OpenAPI::fromJsonValue(m_etsy_client_id, json[QString("etsy_client_id")]);
    m_etsy_client_id_isSet = !json[QString("etsy_client_id")].isNull() && m_etsy_client_id_isValid;

    m_etsy_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_etsy_refresh_token, json[QString("etsy_refresh_token")]);
    m_etsy_refresh_token_isSet = !json[QString("etsy_refresh_token")].isNull() && m_etsy_refresh_token_isValid;

    m_ebay_client_id_isValid = ::OpenAPI::fromJsonValue(m_ebay_client_id, json[QString("ebay_client_id")]);
    m_ebay_client_id_isSet = !json[QString("ebay_client_id")].isNull() && m_ebay_client_id_isValid;

    m_ebay_client_secret_isValid = ::OpenAPI::fromJsonValue(m_ebay_client_secret, json[QString("ebay_client_secret")]);
    m_ebay_client_secret_isSet = !json[QString("ebay_client_secret")].isNull() && m_ebay_client_secret_isValid;

    m_ebay_runame_isValid = ::OpenAPI::fromJsonValue(m_ebay_runame, json[QString("ebay_runame")]);
    m_ebay_runame_isSet = !json[QString("ebay_runame")].isNull() && m_ebay_runame_isValid;

    m_ebay_access_token_isValid = ::OpenAPI::fromJsonValue(m_ebay_access_token, json[QString("ebay_access_token")]);
    m_ebay_access_token_isSet = !json[QString("ebay_access_token")].isNull() && m_ebay_access_token_isValid;

    m_ebay_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_ebay_refresh_token, json[QString("ebay_refresh_token")]);
    m_ebay_refresh_token_isSet = !json[QString("ebay_refresh_token")].isNull() && m_ebay_refresh_token_isValid;

    m_ebay_environment_isValid = ::OpenAPI::fromJsonValue(m_ebay_environment, json[QString("ebay_environment")]);
    m_ebay_environment_isSet = !json[QString("ebay_environment")].isNull() && m_ebay_environment_isValid;

    m_ebay_site_id_isValid = ::OpenAPI::fromJsonValue(m_ebay_site_id, json[QString("ebay_site_id")]);
    m_ebay_site_id_isSet = !json[QString("ebay_site_id")].isNull() && m_ebay_site_id_isValid;

    m_dw_client_id_isValid = ::OpenAPI::fromJsonValue(m_dw_client_id, json[QString("dw_client_id")]);
    m_dw_client_id_isSet = !json[QString("dw_client_id")].isNull() && m_dw_client_id_isValid;

    m_dw_api_pass_isValid = ::OpenAPI::fromJsonValue(m_dw_api_pass, json[QString("dw_api_pass")]);
    m_dw_api_pass_isSet = !json[QString("dw_api_pass")].isNull() && m_dw_api_pass_isValid;

    m_demandware_user_name_isValid = ::OpenAPI::fromJsonValue(m_demandware_user_name, json[QString("demandware_user_name")]);
    m_demandware_user_name_isSet = !json[QString("demandware_user_name")].isNull() && m_demandware_user_name_isValid;

    m_demandware_user_password_isValid = ::OpenAPI::fromJsonValue(m_demandware_user_password, json[QString("demandware_user_password")]);
    m_demandware_user_password_isSet = !json[QString("demandware_user_password")].isNull() && m_demandware_user_password_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("seller_id")]);
    m_seller_id_isSet = !json[QString("seller_id")].isNull() && m_seller_id_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_hybris_client_id_isValid = ::OpenAPI::fromJsonValue(m_hybris_client_id, json[QString("hybris_client_id")]);
    m_hybris_client_id_isSet = !json[QString("hybris_client_id")].isNull() && m_hybris_client_id_isValid;

    m_hybris_client_secret_isValid = ::OpenAPI::fromJsonValue(m_hybris_client_secret, json[QString("hybris_client_secret")]);
    m_hybris_client_secret_isSet = !json[QString("hybris_client_secret")].isNull() && m_hybris_client_secret_isValid;

    m_hybris_username_isValid = ::OpenAPI::fromJsonValue(m_hybris_username, json[QString("hybris_username")]);
    m_hybris_username_isSet = !json[QString("hybris_username")].isNull() && m_hybris_username_isValid;

    m_hybris_password_isValid = ::OpenAPI::fromJsonValue(m_hybris_password, json[QString("hybris_password")]);
    m_hybris_password_isSet = !json[QString("hybris_password")].isNull() && m_hybris_password_isValid;

    m_hybris_websites_isValid = ::OpenAPI::fromJsonValue(m_hybris_websites, json[QString("hybris_websites")]);
    m_hybris_websites_isSet = !json[QString("hybris_websites")].isNull() && m_hybris_websites_isValid;

    m_walmart_client_id_isValid = ::OpenAPI::fromJsonValue(m_walmart_client_id, json[QString("walmart_client_id")]);
    m_walmart_client_id_isSet = !json[QString("walmart_client_id")].isNull() && m_walmart_client_id_isValid;

    m_walmart_client_secret_isValid = ::OpenAPI::fromJsonValue(m_walmart_client_secret, json[QString("walmart_client_secret")]);
    m_walmart_client_secret_isSet = !json[QString("walmart_client_secret")].isNull() && m_walmart_client_secret_isValid;

    m_walmart_environment_isValid = ::OpenAPI::fromJsonValue(m_walmart_environment, json[QString("walmart_environment")]);
    m_walmart_environment_isSet = !json[QString("walmart_environment")].isNull() && m_walmart_environment_isValid;

    m_walmart_channel_type_isValid = ::OpenAPI::fromJsonValue(m_walmart_channel_type, json[QString("walmart_channel_type")]);
    m_walmart_channel_type_isSet = !json[QString("walmart_channel_type")].isNull() && m_walmart_channel_type_isValid;

    m_walmart_region_isValid = ::OpenAPI::fromJsonValue(m_walmart_region, json[QString("walmart_region")]);
    m_walmart_region_isSet = !json[QString("walmart_region")].isNull() && m_walmart_region_isValid;

    m_lightspeed_api_key_isValid = ::OpenAPI::fromJsonValue(m_lightspeed_api_key, json[QString("lightspeed_api_key")]);
    m_lightspeed_api_key_isSet = !json[QString("lightspeed_api_key")].isNull() && m_lightspeed_api_key_isValid;

    m_lightspeed_api_secret_isValid = ::OpenAPI::fromJsonValue(m_lightspeed_api_secret, json[QString("lightspeed_api_secret")]);
    m_lightspeed_api_secret_isSet = !json[QString("lightspeed_api_secret")].isNull() && m_lightspeed_api_secret_isValid;

    m_shoplazza_access_token_isValid = ::OpenAPI::fromJsonValue(m_shoplazza_access_token, json[QString("shoplazza_access_token")]);
    m_shoplazza_access_token_isSet = !json[QString("shoplazza_access_token")].isNull() && m_shoplazza_access_token_isValid;

    m_shoplazza_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_shoplazza_shared_secret, json[QString("shoplazza_shared_secret")]);
    m_shoplazza_shared_secret_isSet = !json[QString("shoplazza_shared_secret")].isNull() && m_shoplazza_shared_secret_isValid;

    m_shopware_access_key_isValid = ::OpenAPI::fromJsonValue(m_shopware_access_key, json[QString("shopware_access_key")]);
    m_shopware_access_key_isSet = !json[QString("shopware_access_key")].isNull() && m_shopware_access_key_isValid;

    m_shopware_api_key_isValid = ::OpenAPI::fromJsonValue(m_shopware_api_key, json[QString("shopware_api_key")]);
    m_shopware_api_key_isSet = !json[QString("shopware_api_key")].isNull() && m_shopware_api_key_isValid;

    m_shopware_api_secret_isValid = ::OpenAPI::fromJsonValue(m_shopware_api_secret, json[QString("shopware_api_secret")]);
    m_shopware_api_secret_isSet = !json[QString("shopware_api_secret")].isNull() && m_shopware_api_secret_isValid;

    m_commercehq_api_key_isValid = ::OpenAPI::fromJsonValue(m_commercehq_api_key, json[QString("commercehq_api_key")]);
    m_commercehq_api_key_isSet = !json[QString("commercehq_api_key")].isNull() && m_commercehq_api_key_isValid;

    m_commercehq_api_password_isValid = ::OpenAPI::fromJsonValue(m_commercehq_api_password, json[QString("commercehq_api_password")]);
    m_commercehq_api_password_isSet = !json[QString("commercehq_api_password")].isNull() && m_commercehq_api_password_isValid;

    m_r_3dcart_private_key_isValid = ::OpenAPI::fromJsonValue(m_r_3dcart_private_key, json[QString("3dcart_private_key")]);
    m_r_3dcart_private_key_isSet = !json[QString("3dcart_private_key")].isNull() && m_r_3dcart_private_key_isValid;

    m_r_3dcart_access_token_isValid = ::OpenAPI::fromJsonValue(m_r_3dcart_access_token, json[QString("3dcart_access_token")]);
    m_r_3dcart_access_token_isSet = !json[QString("3dcart_access_token")].isNull() && m_r_3dcart_access_token_isValid;

    m_wc_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_wc_consumer_key, json[QString("wc_consumer_key")]);
    m_wc_consumer_key_isSet = !json[QString("wc_consumer_key")].isNull() && m_wc_consumer_key_isValid;

    m_wc_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_wc_consumer_secret, json[QString("wc_consumer_secret")]);
    m_wc_consumer_secret_isSet = !json[QString("wc_consumer_secret")].isNull() && m_wc_consumer_secret_isValid;

    m_magento_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_magento_consumer_key, json[QString("magento_consumer_key")]);
    m_magento_consumer_key_isSet = !json[QString("magento_consumer_key")].isNull() && m_magento_consumer_key_isValid;

    m_magento_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_magento_consumer_secret, json[QString("magento_consumer_secret")]);
    m_magento_consumer_secret_isSet = !json[QString("magento_consumer_secret")].isNull() && m_magento_consumer_secret_isValid;

    m_magento_access_token_isValid = ::OpenAPI::fromJsonValue(m_magento_access_token, json[QString("magento_access_token")]);
    m_magento_access_token_isSet = !json[QString("magento_access_token")].isNull() && m_magento_access_token_isValid;

    m_magento_token_secret_isValid = ::OpenAPI::fromJsonValue(m_magento_token_secret, json[QString("magento_token_secret")]);
    m_magento_token_secret_isSet = !json[QString("magento_token_secret")].isNull() && m_magento_token_secret_isValid;

    m_prestashop_webservice_key_isValid = ::OpenAPI::fromJsonValue(m_prestashop_webservice_key, json[QString("prestashop_webservice_key")]);
    m_prestashop_webservice_key_isSet = !json[QString("prestashop_webservice_key")].isNull() && m_prestashop_webservice_key_isValid;

    m_wix_app_id_isValid = ::OpenAPI::fromJsonValue(m_wix_app_id, json[QString("wix_app_id")]);
    m_wix_app_id_isSet = !json[QString("wix_app_id")].isNull() && m_wix_app_id_isValid;

    m_wix_app_secret_key_isValid = ::OpenAPI::fromJsonValue(m_wix_app_secret_key, json[QString("wix_app_secret_key")]);
    m_wix_app_secret_key_isSet = !json[QString("wix_app_secret_key")].isNull() && m_wix_app_secret_key_isValid;

    m_wix_instance_id_isValid = ::OpenAPI::fromJsonValue(m_wix_instance_id, json[QString("wix_instance_id")]);
    m_wix_instance_id_isSet = !json[QString("wix_instance_id")].isNull() && m_wix_instance_id_isValid;

    m_wix_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_wix_refresh_token, json[QString("wix_refresh_token")]);
    m_wix_refresh_token_isSet = !json[QString("wix_refresh_token")].isNull() && m_wix_refresh_token_isValid;

    m_mercado_libre_app_id_isValid = ::OpenAPI::fromJsonValue(m_mercado_libre_app_id, json[QString("mercado_libre_app_id")]);
    m_mercado_libre_app_id_isSet = !json[QString("mercado_libre_app_id")].isNull() && m_mercado_libre_app_id_isValid;

    m_mercado_libre_app_secret_key_isValid = ::OpenAPI::fromJsonValue(m_mercado_libre_app_secret_key, json[QString("mercado_libre_app_secret_key")]);
    m_mercado_libre_app_secret_key_isSet = !json[QString("mercado_libre_app_secret_key")].isNull() && m_mercado_libre_app_secret_key_isValid;

    m_mercado_libre_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_mercado_libre_refresh_token, json[QString("mercado_libre_refresh_token")]);
    m_mercado_libre_refresh_token_isSet = !json[QString("mercado_libre_refresh_token")].isNull() && m_mercado_libre_refresh_token_isValid;

    m_zid_client_id_isValid = ::OpenAPI::fromJsonValue(m_zid_client_id, json[QString("zid_client_id")]);
    m_zid_client_id_isSet = !json[QString("zid_client_id")].isNull() && m_zid_client_id_isValid;

    m_zid_client_secret_isValid = ::OpenAPI::fromJsonValue(m_zid_client_secret, json[QString("zid_client_secret")]);
    m_zid_client_secret_isSet = !json[QString("zid_client_secret")].isNull() && m_zid_client_secret_isValid;

    m_zid_access_token_isValid = ::OpenAPI::fromJsonValue(m_zid_access_token, json[QString("zid_access_token")]);
    m_zid_access_token_isSet = !json[QString("zid_access_token")].isNull() && m_zid_access_token_isValid;

    m_zid_authorization_isValid = ::OpenAPI::fromJsonValue(m_zid_authorization, json[QString("zid_authorization")]);
    m_zid_authorization_isSet = !json[QString("zid_authorization")].isNull() && m_zid_authorization_isValid;

    m_zid_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_zid_refresh_token, json[QString("zid_refresh_token")]);
    m_zid_refresh_token_isSet = !json[QString("zid_refresh_token")].isNull() && m_zid_refresh_token_isValid;

    m_flipkart_client_id_isValid = ::OpenAPI::fromJsonValue(m_flipkart_client_id, json[QString("flipkart_client_id")]);
    m_flipkart_client_id_isSet = !json[QString("flipkart_client_id")].isNull() && m_flipkart_client_id_isValid;

    m_flipkart_client_secret_isValid = ::OpenAPI::fromJsonValue(m_flipkart_client_secret, json[QString("flipkart_client_secret")]);
    m_flipkart_client_secret_isSet = !json[QString("flipkart_client_secret")].isNull() && m_flipkart_client_secret_isValid;

    m_allegro_client_id_isValid = ::OpenAPI::fromJsonValue(m_allegro_client_id, json[QString("allegro_client_id")]);
    m_allegro_client_id_isSet = !json[QString("allegro_client_id")].isNull() && m_allegro_client_id_isValid;

    m_allegro_client_secret_isValid = ::OpenAPI::fromJsonValue(m_allegro_client_secret, json[QString("allegro_client_secret")]);
    m_allegro_client_secret_isSet = !json[QString("allegro_client_secret")].isNull() && m_allegro_client_secret_isValid;

    m_allegro_access_token_isValid = ::OpenAPI::fromJsonValue(m_allegro_access_token, json[QString("allegro_access_token")]);
    m_allegro_access_token_isSet = !json[QString("allegro_access_token")].isNull() && m_allegro_access_token_isValid;

    m_allegro_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_allegro_refresh_token, json[QString("allegro_refresh_token")]);
    m_allegro_refresh_token_isSet = !json[QString("allegro_refresh_token")].isNull() && m_allegro_refresh_token_isValid;

    m_allegro_environment_isValid = ::OpenAPI::fromJsonValue(m_allegro_environment, json[QString("allegro_environment")]);
    m_allegro_environment_isSet = !json[QString("allegro_environment")].isNull() && m_allegro_environment_isValid;
}

QString OAICartCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICartCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_cart_id_isSet) {
        obj.insert(QString("cart_id"), ::OpenAPI::toJsonValue(m_cart_id));
    }
    if (m_store_url_isSet) {
        obj.insert(QString("store_url"), ::OpenAPI::toJsonValue(m_store_url));
    }
    if (m_bridge_url_isSet) {
        obj.insert(QString("bridge_url"), ::OpenAPI::toJsonValue(m_bridge_url));
    }
    if (m_store_root_isSet) {
        obj.insert(QString("store_root"), ::OpenAPI::toJsonValue(m_store_root));
    }
    if (m_store_key_isSet) {
        obj.insert(QString("store_key"), ::OpenAPI::toJsonValue(m_store_key));
    }
    if (m_shared_secret_isSet) {
        obj.insert(QString("shared_secret"), ::OpenAPI::toJsonValue(m_shared_secret));
    }
    if (m_validate_version_isSet) {
        obj.insert(QString("validate_version"), ::OpenAPI::toJsonValue(m_validate_version));
    }
    if (m_verify_isSet) {
        obj.insert(QString("verify"), ::OpenAPI::toJsonValue(m_verify));
    }
    if (m_db_tables_prefix_isSet) {
        obj.insert(QString("db_tables_prefix"), ::OpenAPI::toJsonValue(m_db_tables_prefix));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_ftp_host_isSet) {
        obj.insert(QString("ftp_host"), ::OpenAPI::toJsonValue(m_ftp_host));
    }
    if (m_ftp_user_isSet) {
        obj.insert(QString("ftp_user"), ::OpenAPI::toJsonValue(m_ftp_user));
    }
    if (m_ftp_password_isSet) {
        obj.insert(QString("ftp_password"), ::OpenAPI::toJsonValue(m_ftp_password));
    }
    if (m_ftp_port_isSet) {
        obj.insert(QString("ftp_port"), ::OpenAPI::toJsonValue(m_ftp_port));
    }
    if (m_ftp_store_dir_isSet) {
        obj.insert(QString("ftp_store_dir"), ::OpenAPI::toJsonValue(m_ftp_store_dir));
    }
    if (m_api_key_3dcart_isSet) {
        obj.insert(QString("apiKey_3dcart"), ::OpenAPI::toJsonValue(m_api_key_3dcart));
    }
    if (m_admin_account_isSet) {
        obj.insert(QString("AdminAccount"), ::OpenAPI::toJsonValue(m_admin_account));
    }
    if (m_api_path_isSet) {
        obj.insert(QString("ApiPath"), ::OpenAPI::toJsonValue(m_api_path));
    }
    if (m_api_key_bigcommerce_isSet) {
        obj.insert(QString("ApiKey_Bigcommerce"), ::OpenAPI::toJsonValue(m_api_key_bigcommerce));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_api_key_shopify_isSet) {
        obj.insert(QString("apiKey_shopify"), ::OpenAPI::toJsonValue(m_api_key_shopify));
    }
    if (m_api_password_isSet) {
        obj.insert(QString("apiPassword"), ::OpenAPI::toJsonValue(m_api_password));
    }
    if (m_access_token_shopify_isSet) {
        obj.insert(QString("accessToken_shopify"), ::OpenAPI::toJsonValue(m_access_token_shopify));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_api_username_isSet) {
        obj.insert(QString("apiUsername"), ::OpenAPI::toJsonValue(m_api_username));
    }
    if (m_encrypted_password_isSet) {
        obj.insert(QString("EncryptedPassword"), ::OpenAPI::toJsonValue(m_encrypted_password));
    }
    if (m_login_isSet) {
        obj.insert(QString("Login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_api_user_adnsf_isSet) {
        obj.insert(QString("apiUser_adnsf"), ::OpenAPI::toJsonValue(m_api_user_adnsf));
    }
    if (m_api_pass_isSet) {
        obj.insert(QString("apiPass"), ::OpenAPI::toJsonValue(m_api_pass));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("privateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_app_token_isSet) {
        obj.insert(QString("appToken"), ::OpenAPI::toJsonValue(m_app_token));
    }
    if (m_etsy_keystring_isSet) {
        obj.insert(QString("etsy_keystring"), ::OpenAPI::toJsonValue(m_etsy_keystring));
    }
    if (m_etsy_shared_secret_isSet) {
        obj.insert(QString("etsy_shared_secret"), ::OpenAPI::toJsonValue(m_etsy_shared_secret));
    }
    if (m_token_secret_isSet) {
        obj.insert(QString("tokenSecret"), ::OpenAPI::toJsonValue(m_token_secret));
    }
    if (m_etsy_client_id_isSet) {
        obj.insert(QString("etsy_client_id"), ::OpenAPI::toJsonValue(m_etsy_client_id));
    }
    if (m_etsy_refresh_token_isSet) {
        obj.insert(QString("etsy_refresh_token"), ::OpenAPI::toJsonValue(m_etsy_refresh_token));
    }
    if (m_ebay_client_id_isSet) {
        obj.insert(QString("ebay_client_id"), ::OpenAPI::toJsonValue(m_ebay_client_id));
    }
    if (m_ebay_client_secret_isSet) {
        obj.insert(QString("ebay_client_secret"), ::OpenAPI::toJsonValue(m_ebay_client_secret));
    }
    if (m_ebay_runame_isSet) {
        obj.insert(QString("ebay_runame"), ::OpenAPI::toJsonValue(m_ebay_runame));
    }
    if (m_ebay_access_token_isSet) {
        obj.insert(QString("ebay_access_token"), ::OpenAPI::toJsonValue(m_ebay_access_token));
    }
    if (m_ebay_refresh_token_isSet) {
        obj.insert(QString("ebay_refresh_token"), ::OpenAPI::toJsonValue(m_ebay_refresh_token));
    }
    if (m_ebay_environment_isSet) {
        obj.insert(QString("ebay_environment"), ::OpenAPI::toJsonValue(m_ebay_environment));
    }
    if (m_ebay_site_id_isSet) {
        obj.insert(QString("ebay_site_id"), ::OpenAPI::toJsonValue(m_ebay_site_id));
    }
    if (m_dw_client_id_isSet) {
        obj.insert(QString("dw_client_id"), ::OpenAPI::toJsonValue(m_dw_client_id));
    }
    if (m_dw_api_pass_isSet) {
        obj.insert(QString("dw_api_pass"), ::OpenAPI::toJsonValue(m_dw_api_pass));
    }
    if (m_demandware_user_name_isSet) {
        obj.insert(QString("demandware_user_name"), ::OpenAPI::toJsonValue(m_demandware_user_name));
    }
    if (m_demandware_user_password_isSet) {
        obj.insert(QString("demandware_user_password"), ::OpenAPI::toJsonValue(m_demandware_user_password));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("seller_id"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_hybris_client_id_isSet) {
        obj.insert(QString("hybris_client_id"), ::OpenAPI::toJsonValue(m_hybris_client_id));
    }
    if (m_hybris_client_secret_isSet) {
        obj.insert(QString("hybris_client_secret"), ::OpenAPI::toJsonValue(m_hybris_client_secret));
    }
    if (m_hybris_username_isSet) {
        obj.insert(QString("hybris_username"), ::OpenAPI::toJsonValue(m_hybris_username));
    }
    if (m_hybris_password_isSet) {
        obj.insert(QString("hybris_password"), ::OpenAPI::toJsonValue(m_hybris_password));
    }
    if (m_hybris_websites.size() > 0) {
        obj.insert(QString("hybris_websites"), ::OpenAPI::toJsonValue(m_hybris_websites));
    }
    if (m_walmart_client_id_isSet) {
        obj.insert(QString("walmart_client_id"), ::OpenAPI::toJsonValue(m_walmart_client_id));
    }
    if (m_walmart_client_secret_isSet) {
        obj.insert(QString("walmart_client_secret"), ::OpenAPI::toJsonValue(m_walmart_client_secret));
    }
    if (m_walmart_environment_isSet) {
        obj.insert(QString("walmart_environment"), ::OpenAPI::toJsonValue(m_walmart_environment));
    }
    if (m_walmart_channel_type_isSet) {
        obj.insert(QString("walmart_channel_type"), ::OpenAPI::toJsonValue(m_walmart_channel_type));
    }
    if (m_walmart_region_isSet) {
        obj.insert(QString("walmart_region"), ::OpenAPI::toJsonValue(m_walmart_region));
    }
    if (m_lightspeed_api_key_isSet) {
        obj.insert(QString("lightspeed_api_key"), ::OpenAPI::toJsonValue(m_lightspeed_api_key));
    }
    if (m_lightspeed_api_secret_isSet) {
        obj.insert(QString("lightspeed_api_secret"), ::OpenAPI::toJsonValue(m_lightspeed_api_secret));
    }
    if (m_shoplazza_access_token_isSet) {
        obj.insert(QString("shoplazza_access_token"), ::OpenAPI::toJsonValue(m_shoplazza_access_token));
    }
    if (m_shoplazza_shared_secret_isSet) {
        obj.insert(QString("shoplazza_shared_secret"), ::OpenAPI::toJsonValue(m_shoplazza_shared_secret));
    }
    if (m_shopware_access_key_isSet) {
        obj.insert(QString("shopware_access_key"), ::OpenAPI::toJsonValue(m_shopware_access_key));
    }
    if (m_shopware_api_key_isSet) {
        obj.insert(QString("shopware_api_key"), ::OpenAPI::toJsonValue(m_shopware_api_key));
    }
    if (m_shopware_api_secret_isSet) {
        obj.insert(QString("shopware_api_secret"), ::OpenAPI::toJsonValue(m_shopware_api_secret));
    }
    if (m_commercehq_api_key_isSet) {
        obj.insert(QString("commercehq_api_key"), ::OpenAPI::toJsonValue(m_commercehq_api_key));
    }
    if (m_commercehq_api_password_isSet) {
        obj.insert(QString("commercehq_api_password"), ::OpenAPI::toJsonValue(m_commercehq_api_password));
    }
    if (m_r_3dcart_private_key_isSet) {
        obj.insert(QString("3dcart_private_key"), ::OpenAPI::toJsonValue(m_r_3dcart_private_key));
    }
    if (m_r_3dcart_access_token_isSet) {
        obj.insert(QString("3dcart_access_token"), ::OpenAPI::toJsonValue(m_r_3dcart_access_token));
    }
    if (m_wc_consumer_key_isSet) {
        obj.insert(QString("wc_consumer_key"), ::OpenAPI::toJsonValue(m_wc_consumer_key));
    }
    if (m_wc_consumer_secret_isSet) {
        obj.insert(QString("wc_consumer_secret"), ::OpenAPI::toJsonValue(m_wc_consumer_secret));
    }
    if (m_magento_consumer_key_isSet) {
        obj.insert(QString("magento_consumer_key"), ::OpenAPI::toJsonValue(m_magento_consumer_key));
    }
    if (m_magento_consumer_secret_isSet) {
        obj.insert(QString("magento_consumer_secret"), ::OpenAPI::toJsonValue(m_magento_consumer_secret));
    }
    if (m_magento_access_token_isSet) {
        obj.insert(QString("magento_access_token"), ::OpenAPI::toJsonValue(m_magento_access_token));
    }
    if (m_magento_token_secret_isSet) {
        obj.insert(QString("magento_token_secret"), ::OpenAPI::toJsonValue(m_magento_token_secret));
    }
    if (m_prestashop_webservice_key_isSet) {
        obj.insert(QString("prestashop_webservice_key"), ::OpenAPI::toJsonValue(m_prestashop_webservice_key));
    }
    if (m_wix_app_id_isSet) {
        obj.insert(QString("wix_app_id"), ::OpenAPI::toJsonValue(m_wix_app_id));
    }
    if (m_wix_app_secret_key_isSet) {
        obj.insert(QString("wix_app_secret_key"), ::OpenAPI::toJsonValue(m_wix_app_secret_key));
    }
    if (m_wix_instance_id_isSet) {
        obj.insert(QString("wix_instance_id"), ::OpenAPI::toJsonValue(m_wix_instance_id));
    }
    if (m_wix_refresh_token_isSet) {
        obj.insert(QString("wix_refresh_token"), ::OpenAPI::toJsonValue(m_wix_refresh_token));
    }
    if (m_mercado_libre_app_id_isSet) {
        obj.insert(QString("mercado_libre_app_id"), ::OpenAPI::toJsonValue(m_mercado_libre_app_id));
    }
    if (m_mercado_libre_app_secret_key_isSet) {
        obj.insert(QString("mercado_libre_app_secret_key"), ::OpenAPI::toJsonValue(m_mercado_libre_app_secret_key));
    }
    if (m_mercado_libre_refresh_token_isSet) {
        obj.insert(QString("mercado_libre_refresh_token"), ::OpenAPI::toJsonValue(m_mercado_libre_refresh_token));
    }
    if (m_zid_client_id_isSet) {
        obj.insert(QString("zid_client_id"), ::OpenAPI::toJsonValue(m_zid_client_id));
    }
    if (m_zid_client_secret_isSet) {
        obj.insert(QString("zid_client_secret"), ::OpenAPI::toJsonValue(m_zid_client_secret));
    }
    if (m_zid_access_token_isSet) {
        obj.insert(QString("zid_access_token"), ::OpenAPI::toJsonValue(m_zid_access_token));
    }
    if (m_zid_authorization_isSet) {
        obj.insert(QString("zid_authorization"), ::OpenAPI::toJsonValue(m_zid_authorization));
    }
    if (m_zid_refresh_token_isSet) {
        obj.insert(QString("zid_refresh_token"), ::OpenAPI::toJsonValue(m_zid_refresh_token));
    }
    if (m_flipkart_client_id_isSet) {
        obj.insert(QString("flipkart_client_id"), ::OpenAPI::toJsonValue(m_flipkart_client_id));
    }
    if (m_flipkart_client_secret_isSet) {
        obj.insert(QString("flipkart_client_secret"), ::OpenAPI::toJsonValue(m_flipkart_client_secret));
    }
    if (m_allegro_client_id_isSet) {
        obj.insert(QString("allegro_client_id"), ::OpenAPI::toJsonValue(m_allegro_client_id));
    }
    if (m_allegro_client_secret_isSet) {
        obj.insert(QString("allegro_client_secret"), ::OpenAPI::toJsonValue(m_allegro_client_secret));
    }
    if (m_allegro_access_token_isSet) {
        obj.insert(QString("allegro_access_token"), ::OpenAPI::toJsonValue(m_allegro_access_token));
    }
    if (m_allegro_refresh_token_isSet) {
        obj.insert(QString("allegro_refresh_token"), ::OpenAPI::toJsonValue(m_allegro_refresh_token));
    }
    if (m_allegro_environment_isSet) {
        obj.insert(QString("allegro_environment"), ::OpenAPI::toJsonValue(m_allegro_environment));
    }
    return obj;
}

QString OAICartCreate::getCartId() const {
    return m_cart_id;
}
void OAICartCreate::setCartId(const QString &cart_id) {
    m_cart_id = cart_id;
    m_cart_id_isSet = true;
}

bool OAICartCreate::is_cart_id_Set() const{
    return m_cart_id_isSet;
}

bool OAICartCreate::is_cart_id_Valid() const{
    return m_cart_id_isValid;
}

QString OAICartCreate::getStoreUrl() const {
    return m_store_url;
}
void OAICartCreate::setStoreUrl(const QString &store_url) {
    m_store_url = store_url;
    m_store_url_isSet = true;
}

bool OAICartCreate::is_store_url_Set() const{
    return m_store_url_isSet;
}

bool OAICartCreate::is_store_url_Valid() const{
    return m_store_url_isValid;
}

QString OAICartCreate::getBridgeUrl() const {
    return m_bridge_url;
}
void OAICartCreate::setBridgeUrl(const QString &bridge_url) {
    m_bridge_url = bridge_url;
    m_bridge_url_isSet = true;
}

bool OAICartCreate::is_bridge_url_Set() const{
    return m_bridge_url_isSet;
}

bool OAICartCreate::is_bridge_url_Valid() const{
    return m_bridge_url_isValid;
}

QString OAICartCreate::getStoreRoot() const {
    return m_store_root;
}
void OAICartCreate::setStoreRoot(const QString &store_root) {
    m_store_root = store_root;
    m_store_root_isSet = true;
}

bool OAICartCreate::is_store_root_Set() const{
    return m_store_root_isSet;
}

bool OAICartCreate::is_store_root_Valid() const{
    return m_store_root_isValid;
}

QString OAICartCreate::getStoreKey() const {
    return m_store_key;
}
void OAICartCreate::setStoreKey(const QString &store_key) {
    m_store_key = store_key;
    m_store_key_isSet = true;
}

bool OAICartCreate::is_store_key_Set() const{
    return m_store_key_isSet;
}

bool OAICartCreate::is_store_key_Valid() const{
    return m_store_key_isValid;
}

QString OAICartCreate::getSharedSecret() const {
    return m_shared_secret;
}
void OAICartCreate::setSharedSecret(const QString &shared_secret) {
    m_shared_secret = shared_secret;
    m_shared_secret_isSet = true;
}

bool OAICartCreate::is_shared_secret_Set() const{
    return m_shared_secret_isSet;
}

bool OAICartCreate::is_shared_secret_Valid() const{
    return m_shared_secret_isValid;
}

bool OAICartCreate::isValidateVersion() const {
    return m_validate_version;
}
void OAICartCreate::setValidateVersion(const bool &validate_version) {
    m_validate_version = validate_version;
    m_validate_version_isSet = true;
}

bool OAICartCreate::is_validate_version_Set() const{
    return m_validate_version_isSet;
}

bool OAICartCreate::is_validate_version_Valid() const{
    return m_validate_version_isValid;
}

bool OAICartCreate::isVerify() const {
    return m_verify;
}
void OAICartCreate::setVerify(const bool &verify) {
    m_verify = verify;
    m_verify_isSet = true;
}

bool OAICartCreate::is_verify_Set() const{
    return m_verify_isSet;
}

bool OAICartCreate::is_verify_Valid() const{
    return m_verify_isValid;
}

QString OAICartCreate::getDbTablesPrefix() const {
    return m_db_tables_prefix;
}
void OAICartCreate::setDbTablesPrefix(const QString &db_tables_prefix) {
    m_db_tables_prefix = db_tables_prefix;
    m_db_tables_prefix_isSet = true;
}

bool OAICartCreate::is_db_tables_prefix_Set() const{
    return m_db_tables_prefix_isSet;
}

bool OAICartCreate::is_db_tables_prefix_Valid() const{
    return m_db_tables_prefix_isValid;
}

QString OAICartCreate::getUserAgent() const {
    return m_user_agent;
}
void OAICartCreate::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAICartCreate::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAICartCreate::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAICartCreate::getFtpHost() const {
    return m_ftp_host;
}
void OAICartCreate::setFtpHost(const QString &ftp_host) {
    m_ftp_host = ftp_host;
    m_ftp_host_isSet = true;
}

bool OAICartCreate::is_ftp_host_Set() const{
    return m_ftp_host_isSet;
}

bool OAICartCreate::is_ftp_host_Valid() const{
    return m_ftp_host_isValid;
}

QString OAICartCreate::getFtpUser() const {
    return m_ftp_user;
}
void OAICartCreate::setFtpUser(const QString &ftp_user) {
    m_ftp_user = ftp_user;
    m_ftp_user_isSet = true;
}

bool OAICartCreate::is_ftp_user_Set() const{
    return m_ftp_user_isSet;
}

bool OAICartCreate::is_ftp_user_Valid() const{
    return m_ftp_user_isValid;
}

QString OAICartCreate::getFtpPassword() const {
    return m_ftp_password;
}
void OAICartCreate::setFtpPassword(const QString &ftp_password) {
    m_ftp_password = ftp_password;
    m_ftp_password_isSet = true;
}

bool OAICartCreate::is_ftp_password_Set() const{
    return m_ftp_password_isSet;
}

bool OAICartCreate::is_ftp_password_Valid() const{
    return m_ftp_password_isValid;
}

qint32 OAICartCreate::getFtpPort() const {
    return m_ftp_port;
}
void OAICartCreate::setFtpPort(const qint32 &ftp_port) {
    m_ftp_port = ftp_port;
    m_ftp_port_isSet = true;
}

bool OAICartCreate::is_ftp_port_Set() const{
    return m_ftp_port_isSet;
}

bool OAICartCreate::is_ftp_port_Valid() const{
    return m_ftp_port_isValid;
}

QString OAICartCreate::getFtpStoreDir() const {
    return m_ftp_store_dir;
}
void OAICartCreate::setFtpStoreDir(const QString &ftp_store_dir) {
    m_ftp_store_dir = ftp_store_dir;
    m_ftp_store_dir_isSet = true;
}

bool OAICartCreate::is_ftp_store_dir_Set() const{
    return m_ftp_store_dir_isSet;
}

bool OAICartCreate::is_ftp_store_dir_Valid() const{
    return m_ftp_store_dir_isValid;
}

QString OAICartCreate::getApiKey3dcart() const {
    return m_api_key_3dcart;
}
void OAICartCreate::setApiKey3dcart(const QString &api_key_3dcart) {
    m_api_key_3dcart = api_key_3dcart;
    m_api_key_3dcart_isSet = true;
}

bool OAICartCreate::is_api_key_3dcart_Set() const{
    return m_api_key_3dcart_isSet;
}

bool OAICartCreate::is_api_key_3dcart_Valid() const{
    return m_api_key_3dcart_isValid;
}

QString OAICartCreate::getAdminAccount() const {
    return m_admin_account;
}
void OAICartCreate::setAdminAccount(const QString &admin_account) {
    m_admin_account = admin_account;
    m_admin_account_isSet = true;
}

bool OAICartCreate::is_admin_account_Set() const{
    return m_admin_account_isSet;
}

bool OAICartCreate::is_admin_account_Valid() const{
    return m_admin_account_isValid;
}

QString OAICartCreate::getApiPath() const {
    return m_api_path;
}
void OAICartCreate::setApiPath(const QString &api_path) {
    m_api_path = api_path;
    m_api_path_isSet = true;
}

bool OAICartCreate::is_api_path_Set() const{
    return m_api_path_isSet;
}

bool OAICartCreate::is_api_path_Valid() const{
    return m_api_path_isValid;
}

QString OAICartCreate::getApiKeyBigcommerce() const {
    return m_api_key_bigcommerce;
}
void OAICartCreate::setApiKeyBigcommerce(const QString &api_key_bigcommerce) {
    m_api_key_bigcommerce = api_key_bigcommerce;
    m_api_key_bigcommerce_isSet = true;
}

bool OAICartCreate::is_api_key_bigcommerce_Set() const{
    return m_api_key_bigcommerce_isSet;
}

bool OAICartCreate::is_api_key_bigcommerce_Valid() const{
    return m_api_key_bigcommerce_isValid;
}

QString OAICartCreate::getClientId() const {
    return m_client_id;
}
void OAICartCreate::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAICartCreate::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICartCreate::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAICartCreate::getAccessToken() const {
    return m_access_token;
}
void OAICartCreate::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAICartCreate::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAICartCreate::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAICartCreate::getContext() const {
    return m_context;
}
void OAICartCreate::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAICartCreate::is_context_Set() const{
    return m_context_isSet;
}

bool OAICartCreate::is_context_Valid() const{
    return m_context_isValid;
}

QString OAICartCreate::getAccessToken() const {
    return m_access_token;
}
void OAICartCreate::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAICartCreate::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAICartCreate::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAICartCreate::getApiKeyShopify() const {
    return m_api_key_shopify;
}
void OAICartCreate::setApiKeyShopify(const QString &api_key_shopify) {
    m_api_key_shopify = api_key_shopify;
    m_api_key_shopify_isSet = true;
}

bool OAICartCreate::is_api_key_shopify_Set() const{
    return m_api_key_shopify_isSet;
}

bool OAICartCreate::is_api_key_shopify_Valid() const{
    return m_api_key_shopify_isValid;
}

QString OAICartCreate::getApiPassword() const {
    return m_api_password;
}
void OAICartCreate::setApiPassword(const QString &api_password) {
    m_api_password = api_password;
    m_api_password_isSet = true;
}

bool OAICartCreate::is_api_password_Set() const{
    return m_api_password_isSet;
}

bool OAICartCreate::is_api_password_Valid() const{
    return m_api_password_isValid;
}

QString OAICartCreate::getAccessTokenShopify() const {
    return m_access_token_shopify;
}
void OAICartCreate::setAccessTokenShopify(const QString &access_token_shopify) {
    m_access_token_shopify = access_token_shopify;
    m_access_token_shopify_isSet = true;
}

bool OAICartCreate::is_access_token_shopify_Set() const{
    return m_access_token_shopify_isSet;
}

bool OAICartCreate::is_access_token_shopify_Valid() const{
    return m_access_token_shopify_isValid;
}

QString OAICartCreate::getApiKey() const {
    return m_api_key;
}
void OAICartCreate::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAICartCreate::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAICartCreate::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAICartCreate::getApiUsername() const {
    return m_api_username;
}
void OAICartCreate::setApiUsername(const QString &api_username) {
    m_api_username = api_username;
    m_api_username_isSet = true;
}

bool OAICartCreate::is_api_username_Set() const{
    return m_api_username_isSet;
}

bool OAICartCreate::is_api_username_Valid() const{
    return m_api_username_isValid;
}

QString OAICartCreate::getEncryptedPassword() const {
    return m_encrypted_password;
}
void OAICartCreate::setEncryptedPassword(const QString &encrypted_password) {
    m_encrypted_password = encrypted_password;
    m_encrypted_password_isSet = true;
}

bool OAICartCreate::is_encrypted_password_Set() const{
    return m_encrypted_password_isSet;
}

bool OAICartCreate::is_encrypted_password_Valid() const{
    return m_encrypted_password_isValid;
}

QString OAICartCreate::getLogin() const {
    return m_login;
}
void OAICartCreate::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAICartCreate::is_login_Set() const{
    return m_login_isSet;
}

bool OAICartCreate::is_login_Valid() const{
    return m_login_isValid;
}

QString OAICartCreate::getApiUserAdnsf() const {
    return m_api_user_adnsf;
}
void OAICartCreate::setApiUserAdnsf(const QString &api_user_adnsf) {
    m_api_user_adnsf = api_user_adnsf;
    m_api_user_adnsf_isSet = true;
}

bool OAICartCreate::is_api_user_adnsf_Set() const{
    return m_api_user_adnsf_isSet;
}

bool OAICartCreate::is_api_user_adnsf_Valid() const{
    return m_api_user_adnsf_isValid;
}

QString OAICartCreate::getApiPass() const {
    return m_api_pass;
}
void OAICartCreate::setApiPass(const QString &api_pass) {
    m_api_pass = api_pass;
    m_api_pass_isSet = true;
}

bool OAICartCreate::is_api_pass_Set() const{
    return m_api_pass_isSet;
}

bool OAICartCreate::is_api_pass_Valid() const{
    return m_api_pass_isValid;
}

QString OAICartCreate::getPrivateKey() const {
    return m_private_key;
}
void OAICartCreate::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAICartCreate::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAICartCreate::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAICartCreate::getAppToken() const {
    return m_app_token;
}
void OAICartCreate::setAppToken(const QString &app_token) {
    m_app_token = app_token;
    m_app_token_isSet = true;
}

bool OAICartCreate::is_app_token_Set() const{
    return m_app_token_isSet;
}

bool OAICartCreate::is_app_token_Valid() const{
    return m_app_token_isValid;
}

QString OAICartCreate::getEtsyKeystring() const {
    return m_etsy_keystring;
}
void OAICartCreate::setEtsyKeystring(const QString &etsy_keystring) {
    m_etsy_keystring = etsy_keystring;
    m_etsy_keystring_isSet = true;
}

bool OAICartCreate::is_etsy_keystring_Set() const{
    return m_etsy_keystring_isSet;
}

bool OAICartCreate::is_etsy_keystring_Valid() const{
    return m_etsy_keystring_isValid;
}

QString OAICartCreate::getEtsySharedSecret() const {
    return m_etsy_shared_secret;
}
void OAICartCreate::setEtsySharedSecret(const QString &etsy_shared_secret) {
    m_etsy_shared_secret = etsy_shared_secret;
    m_etsy_shared_secret_isSet = true;
}

bool OAICartCreate::is_etsy_shared_secret_Set() const{
    return m_etsy_shared_secret_isSet;
}

bool OAICartCreate::is_etsy_shared_secret_Valid() const{
    return m_etsy_shared_secret_isValid;
}

QString OAICartCreate::getTokenSecret() const {
    return m_token_secret;
}
void OAICartCreate::setTokenSecret(const QString &token_secret) {
    m_token_secret = token_secret;
    m_token_secret_isSet = true;
}

bool OAICartCreate::is_token_secret_Set() const{
    return m_token_secret_isSet;
}

bool OAICartCreate::is_token_secret_Valid() const{
    return m_token_secret_isValid;
}

QString OAICartCreate::getEtsyClientId() const {
    return m_etsy_client_id;
}
void OAICartCreate::setEtsyClientId(const QString &etsy_client_id) {
    m_etsy_client_id = etsy_client_id;
    m_etsy_client_id_isSet = true;
}

bool OAICartCreate::is_etsy_client_id_Set() const{
    return m_etsy_client_id_isSet;
}

bool OAICartCreate::is_etsy_client_id_Valid() const{
    return m_etsy_client_id_isValid;
}

QString OAICartCreate::getEtsyRefreshToken() const {
    return m_etsy_refresh_token;
}
void OAICartCreate::setEtsyRefreshToken(const QString &etsy_refresh_token) {
    m_etsy_refresh_token = etsy_refresh_token;
    m_etsy_refresh_token_isSet = true;
}

bool OAICartCreate::is_etsy_refresh_token_Set() const{
    return m_etsy_refresh_token_isSet;
}

bool OAICartCreate::is_etsy_refresh_token_Valid() const{
    return m_etsy_refresh_token_isValid;
}

QString OAICartCreate::getEbayClientId() const {
    return m_ebay_client_id;
}
void OAICartCreate::setEbayClientId(const QString &ebay_client_id) {
    m_ebay_client_id = ebay_client_id;
    m_ebay_client_id_isSet = true;
}

bool OAICartCreate::is_ebay_client_id_Set() const{
    return m_ebay_client_id_isSet;
}

bool OAICartCreate::is_ebay_client_id_Valid() const{
    return m_ebay_client_id_isValid;
}

QString OAICartCreate::getEbayClientSecret() const {
    return m_ebay_client_secret;
}
void OAICartCreate::setEbayClientSecret(const QString &ebay_client_secret) {
    m_ebay_client_secret = ebay_client_secret;
    m_ebay_client_secret_isSet = true;
}

bool OAICartCreate::is_ebay_client_secret_Set() const{
    return m_ebay_client_secret_isSet;
}

bool OAICartCreate::is_ebay_client_secret_Valid() const{
    return m_ebay_client_secret_isValid;
}

QString OAICartCreate::getEbayRuname() const {
    return m_ebay_runame;
}
void OAICartCreate::setEbayRuname(const QString &ebay_runame) {
    m_ebay_runame = ebay_runame;
    m_ebay_runame_isSet = true;
}

bool OAICartCreate::is_ebay_runame_Set() const{
    return m_ebay_runame_isSet;
}

bool OAICartCreate::is_ebay_runame_Valid() const{
    return m_ebay_runame_isValid;
}

QString OAICartCreate::getEbayAccessToken() const {
    return m_ebay_access_token;
}
void OAICartCreate::setEbayAccessToken(const QString &ebay_access_token) {
    m_ebay_access_token = ebay_access_token;
    m_ebay_access_token_isSet = true;
}

bool OAICartCreate::is_ebay_access_token_Set() const{
    return m_ebay_access_token_isSet;
}

bool OAICartCreate::is_ebay_access_token_Valid() const{
    return m_ebay_access_token_isValid;
}

QString OAICartCreate::getEbayRefreshToken() const {
    return m_ebay_refresh_token;
}
void OAICartCreate::setEbayRefreshToken(const QString &ebay_refresh_token) {
    m_ebay_refresh_token = ebay_refresh_token;
    m_ebay_refresh_token_isSet = true;
}

bool OAICartCreate::is_ebay_refresh_token_Set() const{
    return m_ebay_refresh_token_isSet;
}

bool OAICartCreate::is_ebay_refresh_token_Valid() const{
    return m_ebay_refresh_token_isValid;
}

QString OAICartCreate::getEbayEnvironment() const {
    return m_ebay_environment;
}
void OAICartCreate::setEbayEnvironment(const QString &ebay_environment) {
    m_ebay_environment = ebay_environment;
    m_ebay_environment_isSet = true;
}

bool OAICartCreate::is_ebay_environment_Set() const{
    return m_ebay_environment_isSet;
}

bool OAICartCreate::is_ebay_environment_Valid() const{
    return m_ebay_environment_isValid;
}

qint32 OAICartCreate::getEbaySiteId() const {
    return m_ebay_site_id;
}
void OAICartCreate::setEbaySiteId(const qint32 &ebay_site_id) {
    m_ebay_site_id = ebay_site_id;
    m_ebay_site_id_isSet = true;
}

bool OAICartCreate::is_ebay_site_id_Set() const{
    return m_ebay_site_id_isSet;
}

bool OAICartCreate::is_ebay_site_id_Valid() const{
    return m_ebay_site_id_isValid;
}

QString OAICartCreate::getDwClientId() const {
    return m_dw_client_id;
}
void OAICartCreate::setDwClientId(const QString &dw_client_id) {
    m_dw_client_id = dw_client_id;
    m_dw_client_id_isSet = true;
}

bool OAICartCreate::is_dw_client_id_Set() const{
    return m_dw_client_id_isSet;
}

bool OAICartCreate::is_dw_client_id_Valid() const{
    return m_dw_client_id_isValid;
}

QString OAICartCreate::getDwApiPass() const {
    return m_dw_api_pass;
}
void OAICartCreate::setDwApiPass(const QString &dw_api_pass) {
    m_dw_api_pass = dw_api_pass;
    m_dw_api_pass_isSet = true;
}

bool OAICartCreate::is_dw_api_pass_Set() const{
    return m_dw_api_pass_isSet;
}

bool OAICartCreate::is_dw_api_pass_Valid() const{
    return m_dw_api_pass_isValid;
}

QString OAICartCreate::getDemandwareUserName() const {
    return m_demandware_user_name;
}
void OAICartCreate::setDemandwareUserName(const QString &demandware_user_name) {
    m_demandware_user_name = demandware_user_name;
    m_demandware_user_name_isSet = true;
}

bool OAICartCreate::is_demandware_user_name_Set() const{
    return m_demandware_user_name_isSet;
}

bool OAICartCreate::is_demandware_user_name_Valid() const{
    return m_demandware_user_name_isValid;
}

QString OAICartCreate::getDemandwareUserPassword() const {
    return m_demandware_user_password;
}
void OAICartCreate::setDemandwareUserPassword(const QString &demandware_user_password) {
    m_demandware_user_password = demandware_user_password;
    m_demandware_user_password_isSet = true;
}

bool OAICartCreate::is_demandware_user_password_Set() const{
    return m_demandware_user_password_isSet;
}

bool OAICartCreate::is_demandware_user_password_Valid() const{
    return m_demandware_user_password_isValid;
}

QString OAICartCreate::getStoreId() const {
    return m_store_id;
}
void OAICartCreate::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAICartCreate::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAICartCreate::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAICartCreate::getSellerId() const {
    return m_seller_id;
}
void OAICartCreate::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAICartCreate::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAICartCreate::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAICartCreate::getEnvironment() const {
    return m_environment;
}
void OAICartCreate::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICartCreate::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICartCreate::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAICartCreate::getHybrisClientId() const {
    return m_hybris_client_id;
}
void OAICartCreate::setHybrisClientId(const QString &hybris_client_id) {
    m_hybris_client_id = hybris_client_id;
    m_hybris_client_id_isSet = true;
}

bool OAICartCreate::is_hybris_client_id_Set() const{
    return m_hybris_client_id_isSet;
}

bool OAICartCreate::is_hybris_client_id_Valid() const{
    return m_hybris_client_id_isValid;
}

QString OAICartCreate::getHybrisClientSecret() const {
    return m_hybris_client_secret;
}
void OAICartCreate::setHybrisClientSecret(const QString &hybris_client_secret) {
    m_hybris_client_secret = hybris_client_secret;
    m_hybris_client_secret_isSet = true;
}

bool OAICartCreate::is_hybris_client_secret_Set() const{
    return m_hybris_client_secret_isSet;
}

bool OAICartCreate::is_hybris_client_secret_Valid() const{
    return m_hybris_client_secret_isValid;
}

QString OAICartCreate::getHybrisUsername() const {
    return m_hybris_username;
}
void OAICartCreate::setHybrisUsername(const QString &hybris_username) {
    m_hybris_username = hybris_username;
    m_hybris_username_isSet = true;
}

bool OAICartCreate::is_hybris_username_Set() const{
    return m_hybris_username_isSet;
}

bool OAICartCreate::is_hybris_username_Valid() const{
    return m_hybris_username_isValid;
}

QString OAICartCreate::getHybrisPassword() const {
    return m_hybris_password;
}
void OAICartCreate::setHybrisPassword(const QString &hybris_password) {
    m_hybris_password = hybris_password;
    m_hybris_password_isSet = true;
}

bool OAICartCreate::is_hybris_password_Set() const{
    return m_hybris_password_isSet;
}

bool OAICartCreate::is_hybris_password_Valid() const{
    return m_hybris_password_isValid;
}

QList<OAIAccountCartAdd_hybris_websites_inner> OAICartCreate::getHybrisWebsites() const {
    return m_hybris_websites;
}
void OAICartCreate::setHybrisWebsites(const QList<OAIAccountCartAdd_hybris_websites_inner> &hybris_websites) {
    m_hybris_websites = hybris_websites;
    m_hybris_websites_isSet = true;
}

bool OAICartCreate::is_hybris_websites_Set() const{
    return m_hybris_websites_isSet;
}

bool OAICartCreate::is_hybris_websites_Valid() const{
    return m_hybris_websites_isValid;
}

QString OAICartCreate::getWalmartClientId() const {
    return m_walmart_client_id;
}
void OAICartCreate::setWalmartClientId(const QString &walmart_client_id) {
    m_walmart_client_id = walmart_client_id;
    m_walmart_client_id_isSet = true;
}

bool OAICartCreate::is_walmart_client_id_Set() const{
    return m_walmart_client_id_isSet;
}

bool OAICartCreate::is_walmart_client_id_Valid() const{
    return m_walmart_client_id_isValid;
}

QString OAICartCreate::getWalmartClientSecret() const {
    return m_walmart_client_secret;
}
void OAICartCreate::setWalmartClientSecret(const QString &walmart_client_secret) {
    m_walmart_client_secret = walmart_client_secret;
    m_walmart_client_secret_isSet = true;
}

bool OAICartCreate::is_walmart_client_secret_Set() const{
    return m_walmart_client_secret_isSet;
}

bool OAICartCreate::is_walmart_client_secret_Valid() const{
    return m_walmart_client_secret_isValid;
}

QString OAICartCreate::getWalmartEnvironment() const {
    return m_walmart_environment;
}
void OAICartCreate::setWalmartEnvironment(const QString &walmart_environment) {
    m_walmart_environment = walmart_environment;
    m_walmart_environment_isSet = true;
}

bool OAICartCreate::is_walmart_environment_Set() const{
    return m_walmart_environment_isSet;
}

bool OAICartCreate::is_walmart_environment_Valid() const{
    return m_walmart_environment_isValid;
}

QString OAICartCreate::getWalmartChannelType() const {
    return m_walmart_channel_type;
}
void OAICartCreate::setWalmartChannelType(const QString &walmart_channel_type) {
    m_walmart_channel_type = walmart_channel_type;
    m_walmart_channel_type_isSet = true;
}

bool OAICartCreate::is_walmart_channel_type_Set() const{
    return m_walmart_channel_type_isSet;
}

bool OAICartCreate::is_walmart_channel_type_Valid() const{
    return m_walmart_channel_type_isValid;
}

QString OAICartCreate::getWalmartRegion() const {
    return m_walmart_region;
}
void OAICartCreate::setWalmartRegion(const QString &walmart_region) {
    m_walmart_region = walmart_region;
    m_walmart_region_isSet = true;
}

bool OAICartCreate::is_walmart_region_Set() const{
    return m_walmart_region_isSet;
}

bool OAICartCreate::is_walmart_region_Valid() const{
    return m_walmart_region_isValid;
}

QString OAICartCreate::getLightspeedApiKey() const {
    return m_lightspeed_api_key;
}
void OAICartCreate::setLightspeedApiKey(const QString &lightspeed_api_key) {
    m_lightspeed_api_key = lightspeed_api_key;
    m_lightspeed_api_key_isSet = true;
}

bool OAICartCreate::is_lightspeed_api_key_Set() const{
    return m_lightspeed_api_key_isSet;
}

bool OAICartCreate::is_lightspeed_api_key_Valid() const{
    return m_lightspeed_api_key_isValid;
}

QString OAICartCreate::getLightspeedApiSecret() const {
    return m_lightspeed_api_secret;
}
void OAICartCreate::setLightspeedApiSecret(const QString &lightspeed_api_secret) {
    m_lightspeed_api_secret = lightspeed_api_secret;
    m_lightspeed_api_secret_isSet = true;
}

bool OAICartCreate::is_lightspeed_api_secret_Set() const{
    return m_lightspeed_api_secret_isSet;
}

bool OAICartCreate::is_lightspeed_api_secret_Valid() const{
    return m_lightspeed_api_secret_isValid;
}

QString OAICartCreate::getShoplazzaAccessToken() const {
    return m_shoplazza_access_token;
}
void OAICartCreate::setShoplazzaAccessToken(const QString &shoplazza_access_token) {
    m_shoplazza_access_token = shoplazza_access_token;
    m_shoplazza_access_token_isSet = true;
}

bool OAICartCreate::is_shoplazza_access_token_Set() const{
    return m_shoplazza_access_token_isSet;
}

bool OAICartCreate::is_shoplazza_access_token_Valid() const{
    return m_shoplazza_access_token_isValid;
}

QString OAICartCreate::getShoplazzaSharedSecret() const {
    return m_shoplazza_shared_secret;
}
void OAICartCreate::setShoplazzaSharedSecret(const QString &shoplazza_shared_secret) {
    m_shoplazza_shared_secret = shoplazza_shared_secret;
    m_shoplazza_shared_secret_isSet = true;
}

bool OAICartCreate::is_shoplazza_shared_secret_Set() const{
    return m_shoplazza_shared_secret_isSet;
}

bool OAICartCreate::is_shoplazza_shared_secret_Valid() const{
    return m_shoplazza_shared_secret_isValid;
}

QString OAICartCreate::getShopwareAccessKey() const {
    return m_shopware_access_key;
}
void OAICartCreate::setShopwareAccessKey(const QString &shopware_access_key) {
    m_shopware_access_key = shopware_access_key;
    m_shopware_access_key_isSet = true;
}

bool OAICartCreate::is_shopware_access_key_Set() const{
    return m_shopware_access_key_isSet;
}

bool OAICartCreate::is_shopware_access_key_Valid() const{
    return m_shopware_access_key_isValid;
}

QString OAICartCreate::getShopwareApiKey() const {
    return m_shopware_api_key;
}
void OAICartCreate::setShopwareApiKey(const QString &shopware_api_key) {
    m_shopware_api_key = shopware_api_key;
    m_shopware_api_key_isSet = true;
}

bool OAICartCreate::is_shopware_api_key_Set() const{
    return m_shopware_api_key_isSet;
}

bool OAICartCreate::is_shopware_api_key_Valid() const{
    return m_shopware_api_key_isValid;
}

QString OAICartCreate::getShopwareApiSecret() const {
    return m_shopware_api_secret;
}
void OAICartCreate::setShopwareApiSecret(const QString &shopware_api_secret) {
    m_shopware_api_secret = shopware_api_secret;
    m_shopware_api_secret_isSet = true;
}

bool OAICartCreate::is_shopware_api_secret_Set() const{
    return m_shopware_api_secret_isSet;
}

bool OAICartCreate::is_shopware_api_secret_Valid() const{
    return m_shopware_api_secret_isValid;
}

QString OAICartCreate::getCommercehqApiKey() const {
    return m_commercehq_api_key;
}
void OAICartCreate::setCommercehqApiKey(const QString &commercehq_api_key) {
    m_commercehq_api_key = commercehq_api_key;
    m_commercehq_api_key_isSet = true;
}

bool OAICartCreate::is_commercehq_api_key_Set() const{
    return m_commercehq_api_key_isSet;
}

bool OAICartCreate::is_commercehq_api_key_Valid() const{
    return m_commercehq_api_key_isValid;
}

QString OAICartCreate::getCommercehqApiPassword() const {
    return m_commercehq_api_password;
}
void OAICartCreate::setCommercehqApiPassword(const QString &commercehq_api_password) {
    m_commercehq_api_password = commercehq_api_password;
    m_commercehq_api_password_isSet = true;
}

bool OAICartCreate::is_commercehq_api_password_Set() const{
    return m_commercehq_api_password_isSet;
}

bool OAICartCreate::is_commercehq_api_password_Valid() const{
    return m_commercehq_api_password_isValid;
}

QString OAICartCreate::getR3dcartPrivateKey() const {
    return m_r_3dcart_private_key;
}
void OAICartCreate::setR3dcartPrivateKey(const QString &r_3dcart_private_key) {
    m_r_3dcart_private_key = r_3dcart_private_key;
    m_r_3dcart_private_key_isSet = true;
}

bool OAICartCreate::is_r_3dcart_private_key_Set() const{
    return m_r_3dcart_private_key_isSet;
}

bool OAICartCreate::is_r_3dcart_private_key_Valid() const{
    return m_r_3dcart_private_key_isValid;
}

QString OAICartCreate::getR3dcartAccessToken() const {
    return m_r_3dcart_access_token;
}
void OAICartCreate::setR3dcartAccessToken(const QString &r_3dcart_access_token) {
    m_r_3dcart_access_token = r_3dcart_access_token;
    m_r_3dcart_access_token_isSet = true;
}

bool OAICartCreate::is_r_3dcart_access_token_Set() const{
    return m_r_3dcart_access_token_isSet;
}

bool OAICartCreate::is_r_3dcart_access_token_Valid() const{
    return m_r_3dcart_access_token_isValid;
}

QString OAICartCreate::getWcConsumerKey() const {
    return m_wc_consumer_key;
}
void OAICartCreate::setWcConsumerKey(const QString &wc_consumer_key) {
    m_wc_consumer_key = wc_consumer_key;
    m_wc_consumer_key_isSet = true;
}

bool OAICartCreate::is_wc_consumer_key_Set() const{
    return m_wc_consumer_key_isSet;
}

bool OAICartCreate::is_wc_consumer_key_Valid() const{
    return m_wc_consumer_key_isValid;
}

QString OAICartCreate::getWcConsumerSecret() const {
    return m_wc_consumer_secret;
}
void OAICartCreate::setWcConsumerSecret(const QString &wc_consumer_secret) {
    m_wc_consumer_secret = wc_consumer_secret;
    m_wc_consumer_secret_isSet = true;
}

bool OAICartCreate::is_wc_consumer_secret_Set() const{
    return m_wc_consumer_secret_isSet;
}

bool OAICartCreate::is_wc_consumer_secret_Valid() const{
    return m_wc_consumer_secret_isValid;
}

QString OAICartCreate::getMagentoConsumerKey() const {
    return m_magento_consumer_key;
}
void OAICartCreate::setMagentoConsumerKey(const QString &magento_consumer_key) {
    m_magento_consumer_key = magento_consumer_key;
    m_magento_consumer_key_isSet = true;
}

bool OAICartCreate::is_magento_consumer_key_Set() const{
    return m_magento_consumer_key_isSet;
}

bool OAICartCreate::is_magento_consumer_key_Valid() const{
    return m_magento_consumer_key_isValid;
}

QString OAICartCreate::getMagentoConsumerSecret() const {
    return m_magento_consumer_secret;
}
void OAICartCreate::setMagentoConsumerSecret(const QString &magento_consumer_secret) {
    m_magento_consumer_secret = magento_consumer_secret;
    m_magento_consumer_secret_isSet = true;
}

bool OAICartCreate::is_magento_consumer_secret_Set() const{
    return m_magento_consumer_secret_isSet;
}

bool OAICartCreate::is_magento_consumer_secret_Valid() const{
    return m_magento_consumer_secret_isValid;
}

QString OAICartCreate::getMagentoAccessToken() const {
    return m_magento_access_token;
}
void OAICartCreate::setMagentoAccessToken(const QString &magento_access_token) {
    m_magento_access_token = magento_access_token;
    m_magento_access_token_isSet = true;
}

bool OAICartCreate::is_magento_access_token_Set() const{
    return m_magento_access_token_isSet;
}

bool OAICartCreate::is_magento_access_token_Valid() const{
    return m_magento_access_token_isValid;
}

QString OAICartCreate::getMagentoTokenSecret() const {
    return m_magento_token_secret;
}
void OAICartCreate::setMagentoTokenSecret(const QString &magento_token_secret) {
    m_magento_token_secret = magento_token_secret;
    m_magento_token_secret_isSet = true;
}

bool OAICartCreate::is_magento_token_secret_Set() const{
    return m_magento_token_secret_isSet;
}

bool OAICartCreate::is_magento_token_secret_Valid() const{
    return m_magento_token_secret_isValid;
}

QString OAICartCreate::getPrestashopWebserviceKey() const {
    return m_prestashop_webservice_key;
}
void OAICartCreate::setPrestashopWebserviceKey(const QString &prestashop_webservice_key) {
    m_prestashop_webservice_key = prestashop_webservice_key;
    m_prestashop_webservice_key_isSet = true;
}

bool OAICartCreate::is_prestashop_webservice_key_Set() const{
    return m_prestashop_webservice_key_isSet;
}

bool OAICartCreate::is_prestashop_webservice_key_Valid() const{
    return m_prestashop_webservice_key_isValid;
}

QString OAICartCreate::getWixAppId() const {
    return m_wix_app_id;
}
void OAICartCreate::setWixAppId(const QString &wix_app_id) {
    m_wix_app_id = wix_app_id;
    m_wix_app_id_isSet = true;
}

bool OAICartCreate::is_wix_app_id_Set() const{
    return m_wix_app_id_isSet;
}

bool OAICartCreate::is_wix_app_id_Valid() const{
    return m_wix_app_id_isValid;
}

QString OAICartCreate::getWixAppSecretKey() const {
    return m_wix_app_secret_key;
}
void OAICartCreate::setWixAppSecretKey(const QString &wix_app_secret_key) {
    m_wix_app_secret_key = wix_app_secret_key;
    m_wix_app_secret_key_isSet = true;
}

bool OAICartCreate::is_wix_app_secret_key_Set() const{
    return m_wix_app_secret_key_isSet;
}

bool OAICartCreate::is_wix_app_secret_key_Valid() const{
    return m_wix_app_secret_key_isValid;
}

QString OAICartCreate::getWixInstanceId() const {
    return m_wix_instance_id;
}
void OAICartCreate::setWixInstanceId(const QString &wix_instance_id) {
    m_wix_instance_id = wix_instance_id;
    m_wix_instance_id_isSet = true;
}

bool OAICartCreate::is_wix_instance_id_Set() const{
    return m_wix_instance_id_isSet;
}

bool OAICartCreate::is_wix_instance_id_Valid() const{
    return m_wix_instance_id_isValid;
}

QString OAICartCreate::getWixRefreshToken() const {
    return m_wix_refresh_token;
}
void OAICartCreate::setWixRefreshToken(const QString &wix_refresh_token) {
    m_wix_refresh_token = wix_refresh_token;
    m_wix_refresh_token_isSet = true;
}

bool OAICartCreate::is_wix_refresh_token_Set() const{
    return m_wix_refresh_token_isSet;
}

bool OAICartCreate::is_wix_refresh_token_Valid() const{
    return m_wix_refresh_token_isValid;
}

QString OAICartCreate::getMercadoLibreAppId() const {
    return m_mercado_libre_app_id;
}
void OAICartCreate::setMercadoLibreAppId(const QString &mercado_libre_app_id) {
    m_mercado_libre_app_id = mercado_libre_app_id;
    m_mercado_libre_app_id_isSet = true;
}

bool OAICartCreate::is_mercado_libre_app_id_Set() const{
    return m_mercado_libre_app_id_isSet;
}

bool OAICartCreate::is_mercado_libre_app_id_Valid() const{
    return m_mercado_libre_app_id_isValid;
}

QString OAICartCreate::getMercadoLibreAppSecretKey() const {
    return m_mercado_libre_app_secret_key;
}
void OAICartCreate::setMercadoLibreAppSecretKey(const QString &mercado_libre_app_secret_key) {
    m_mercado_libre_app_secret_key = mercado_libre_app_secret_key;
    m_mercado_libre_app_secret_key_isSet = true;
}

bool OAICartCreate::is_mercado_libre_app_secret_key_Set() const{
    return m_mercado_libre_app_secret_key_isSet;
}

bool OAICartCreate::is_mercado_libre_app_secret_key_Valid() const{
    return m_mercado_libre_app_secret_key_isValid;
}

QString OAICartCreate::getMercadoLibreRefreshToken() const {
    return m_mercado_libre_refresh_token;
}
void OAICartCreate::setMercadoLibreRefreshToken(const QString &mercado_libre_refresh_token) {
    m_mercado_libre_refresh_token = mercado_libre_refresh_token;
    m_mercado_libre_refresh_token_isSet = true;
}

bool OAICartCreate::is_mercado_libre_refresh_token_Set() const{
    return m_mercado_libre_refresh_token_isSet;
}

bool OAICartCreate::is_mercado_libre_refresh_token_Valid() const{
    return m_mercado_libre_refresh_token_isValid;
}

qint32 OAICartCreate::getZidClientId() const {
    return m_zid_client_id;
}
void OAICartCreate::setZidClientId(const qint32 &zid_client_id) {
    m_zid_client_id = zid_client_id;
    m_zid_client_id_isSet = true;
}

bool OAICartCreate::is_zid_client_id_Set() const{
    return m_zid_client_id_isSet;
}

bool OAICartCreate::is_zid_client_id_Valid() const{
    return m_zid_client_id_isValid;
}

QString OAICartCreate::getZidClientSecret() const {
    return m_zid_client_secret;
}
void OAICartCreate::setZidClientSecret(const QString &zid_client_secret) {
    m_zid_client_secret = zid_client_secret;
    m_zid_client_secret_isSet = true;
}

bool OAICartCreate::is_zid_client_secret_Set() const{
    return m_zid_client_secret_isSet;
}

bool OAICartCreate::is_zid_client_secret_Valid() const{
    return m_zid_client_secret_isValid;
}

QString OAICartCreate::getZidAccessToken() const {
    return m_zid_access_token;
}
void OAICartCreate::setZidAccessToken(const QString &zid_access_token) {
    m_zid_access_token = zid_access_token;
    m_zid_access_token_isSet = true;
}

bool OAICartCreate::is_zid_access_token_Set() const{
    return m_zid_access_token_isSet;
}

bool OAICartCreate::is_zid_access_token_Valid() const{
    return m_zid_access_token_isValid;
}

QString OAICartCreate::getZidAuthorization() const {
    return m_zid_authorization;
}
void OAICartCreate::setZidAuthorization(const QString &zid_authorization) {
    m_zid_authorization = zid_authorization;
    m_zid_authorization_isSet = true;
}

bool OAICartCreate::is_zid_authorization_Set() const{
    return m_zid_authorization_isSet;
}

bool OAICartCreate::is_zid_authorization_Valid() const{
    return m_zid_authorization_isValid;
}

QString OAICartCreate::getZidRefreshToken() const {
    return m_zid_refresh_token;
}
void OAICartCreate::setZidRefreshToken(const QString &zid_refresh_token) {
    m_zid_refresh_token = zid_refresh_token;
    m_zid_refresh_token_isSet = true;
}

bool OAICartCreate::is_zid_refresh_token_Set() const{
    return m_zid_refresh_token_isSet;
}

bool OAICartCreate::is_zid_refresh_token_Valid() const{
    return m_zid_refresh_token_isValid;
}

QString OAICartCreate::getFlipkartClientId() const {
    return m_flipkart_client_id;
}
void OAICartCreate::setFlipkartClientId(const QString &flipkart_client_id) {
    m_flipkart_client_id = flipkart_client_id;
    m_flipkart_client_id_isSet = true;
}

bool OAICartCreate::is_flipkart_client_id_Set() const{
    return m_flipkart_client_id_isSet;
}

bool OAICartCreate::is_flipkart_client_id_Valid() const{
    return m_flipkart_client_id_isValid;
}

QString OAICartCreate::getFlipkartClientSecret() const {
    return m_flipkart_client_secret;
}
void OAICartCreate::setFlipkartClientSecret(const QString &flipkart_client_secret) {
    m_flipkart_client_secret = flipkart_client_secret;
    m_flipkart_client_secret_isSet = true;
}

bool OAICartCreate::is_flipkart_client_secret_Set() const{
    return m_flipkart_client_secret_isSet;
}

bool OAICartCreate::is_flipkart_client_secret_Valid() const{
    return m_flipkart_client_secret_isValid;
}

QString OAICartCreate::getAllegroClientId() const {
    return m_allegro_client_id;
}
void OAICartCreate::setAllegroClientId(const QString &allegro_client_id) {
    m_allegro_client_id = allegro_client_id;
    m_allegro_client_id_isSet = true;
}

bool OAICartCreate::is_allegro_client_id_Set() const{
    return m_allegro_client_id_isSet;
}

bool OAICartCreate::is_allegro_client_id_Valid() const{
    return m_allegro_client_id_isValid;
}

QString OAICartCreate::getAllegroClientSecret() const {
    return m_allegro_client_secret;
}
void OAICartCreate::setAllegroClientSecret(const QString &allegro_client_secret) {
    m_allegro_client_secret = allegro_client_secret;
    m_allegro_client_secret_isSet = true;
}

bool OAICartCreate::is_allegro_client_secret_Set() const{
    return m_allegro_client_secret_isSet;
}

bool OAICartCreate::is_allegro_client_secret_Valid() const{
    return m_allegro_client_secret_isValid;
}

QString OAICartCreate::getAllegroAccessToken() const {
    return m_allegro_access_token;
}
void OAICartCreate::setAllegroAccessToken(const QString &allegro_access_token) {
    m_allegro_access_token = allegro_access_token;
    m_allegro_access_token_isSet = true;
}

bool OAICartCreate::is_allegro_access_token_Set() const{
    return m_allegro_access_token_isSet;
}

bool OAICartCreate::is_allegro_access_token_Valid() const{
    return m_allegro_access_token_isValid;
}

QString OAICartCreate::getAllegroRefreshToken() const {
    return m_allegro_refresh_token;
}
void OAICartCreate::setAllegroRefreshToken(const QString &allegro_refresh_token) {
    m_allegro_refresh_token = allegro_refresh_token;
    m_allegro_refresh_token_isSet = true;
}

bool OAICartCreate::is_allegro_refresh_token_Set() const{
    return m_allegro_refresh_token_isSet;
}

bool OAICartCreate::is_allegro_refresh_token_Valid() const{
    return m_allegro_refresh_token_isValid;
}

QString OAICartCreate::getAllegroEnvironment() const {
    return m_allegro_environment;
}
void OAICartCreate::setAllegroEnvironment(const QString &allegro_environment) {
    m_allegro_environment = allegro_environment;
    m_allegro_environment_isSet = true;
}

bool OAICartCreate::is_allegro_environment_Set() const{
    return m_allegro_environment_isSet;
}

bool OAICartCreate::is_allegro_environment_Valid() const{
    return m_allegro_environment_isValid;
}

bool OAICartCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_tables_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_store_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_3dcart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_bigcommerce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_shopify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_shopify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_user_adnsf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etsy_keystring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etsy_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etsy_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etsy_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_runame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dw_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dw_api_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demandware_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demandware_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybris_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybris_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybris_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybris_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybris_websites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_walmart_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walmart_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walmart_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walmart_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walmart_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lightspeed_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lightspeed_api_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shoplazza_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shoplazza_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopware_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopware_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopware_api_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercehq_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercehq_api_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_3dcart_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_3dcart_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wc_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wc_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magento_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magento_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magento_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magento_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prestashop_webservice_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wix_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wix_app_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wix_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wix_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mercado_libre_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mercado_libre_app_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mercado_libre_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zid_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zid_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zid_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zid_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zid_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flipkart_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flipkart_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allegro_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allegro_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allegro_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allegro_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allegro_environment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICartCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cart_id_isValid && m_store_id_isValid && m_wix_app_id_isValid && m_wix_app_secret_key_isValid && true;
}

} // namespace OpenAPI
