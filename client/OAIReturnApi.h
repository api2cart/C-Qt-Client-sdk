/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReturnApi_H
#define OAI_OAIReturnApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIModel_Response_Return_List.h"
#include "OAIReturnActionList_200_response.h"
#include "OAIReturnCount_200_response.h"
#include "OAIReturnInfo_200_response.h"
#include "OAIReturnReasonList_200_response.h"
#include "OAIReturnStatusList_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReturnApi : public QObject {
    Q_OBJECT

public:
    OAIReturnApi(const int timeOut = 0);
    ~OAIReturnApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void returnActionList();

    /**
    * @param[in]  order_ids QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  return_type QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    */
    virtual void returnCount(const ::OpenAPI::OptionalParam<QString> &order_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  order_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void returnInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  order_id QString [optional]
    * @param[in]  order_ids QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  return_type QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    */
    virtual void returnList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  store_id QString [optional]
    */
    virtual void returnReasonList(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());


    virtual void returnStatusList();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void returnActionListCallback(OAIHttpRequestWorker *worker);
    void returnCountCallback(OAIHttpRequestWorker *worker);
    void returnInfoCallback(OAIHttpRequestWorker *worker);
    void returnListCallback(OAIHttpRequestWorker *worker);
    void returnReasonListCallback(OAIHttpRequestWorker *worker);
    void returnStatusListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void returnActionListSignal(OAIReturnActionList_200_response summary);
    void returnCountSignal(OAIReturnCount_200_response summary);
    void returnInfoSignal(OAIReturnInfo_200_response summary);
    void returnListSignal(OAIModel_Response_Return_List summary);
    void returnReasonListSignal(OAIReturnReasonList_200_response summary);
    void returnStatusListSignal(OAIReturnStatusList_200_response summary);


    void returnActionListSignalFull(OAIHttpRequestWorker *worker, OAIReturnActionList_200_response summary);
    void returnCountSignalFull(OAIHttpRequestWorker *worker, OAIReturnCount_200_response summary);
    void returnInfoSignalFull(OAIHttpRequestWorker *worker, OAIReturnInfo_200_response summary);
    void returnListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Return_List summary);
    void returnReasonListSignalFull(OAIHttpRequestWorker *worker, OAIReturnReasonList_200_response summary);
    void returnStatusListSignalFull(OAIHttpRequestWorker *worker, OAIReturnStatusList_200_response summary);

    Q_DECL_DEPRECATED_X("Use returnActionListSignalError() instead")
    void returnActionListSignalE(OAIReturnActionList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnActionListSignalError(OAIReturnActionList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnCountSignalError() instead")
    void returnCountSignalE(OAIReturnCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnCountSignalError(OAIReturnCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnInfoSignalError() instead")
    void returnInfoSignalE(OAIReturnInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnInfoSignalError(OAIReturnInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnListSignalError() instead")
    void returnListSignalE(OAIModel_Response_Return_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnListSignalError(OAIModel_Response_Return_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnReasonListSignalError() instead")
    void returnReasonListSignalE(OAIReturnReasonList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnReasonListSignalError(OAIReturnReasonList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnStatusListSignalError() instead")
    void returnStatusListSignalE(OAIReturnStatusList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnStatusListSignalError(OAIReturnStatusList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use returnActionListSignalErrorFull() instead")
    void returnActionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnActionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnCountSignalErrorFull() instead")
    void returnCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnInfoSignalErrorFull() instead")
    void returnInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnListSignalErrorFull() instead")
    void returnListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnReasonListSignalErrorFull() instead")
    void returnReasonListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnReasonListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnStatusListSignalErrorFull() instead")
    void returnStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
