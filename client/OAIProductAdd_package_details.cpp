/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductAdd_package_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductAdd_package_details::OAIProductAdd_package_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductAdd_package_details::OAIProductAdd_package_details() {
    this->initializeModel();
}

OAIProductAdd_package_details::~OAIProductAdd_package_details() {}

void OAIProductAdd_package_details::initializeModel() {

    m_measure_unit_isSet = false;
    m_measure_unit_isValid = false;

    m_weigh_unit_isSet = false;
    m_weigh_unit_isValid = false;

    m_package_depth_isSet = false;
    m_package_depth_isValid = false;

    m_package_length_isSet = false;
    m_package_length_isValid = false;

    m_package_width_isSet = false;
    m_package_width_isValid = false;

    m_weight_major_isSet = false;
    m_weight_major_isValid = false;

    m_weight_minor_isSet = false;
    m_weight_minor_isValid = false;

    m_shipping_package_isSet = false;
    m_shipping_package_isValid = false;
}

void OAIProductAdd_package_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductAdd_package_details::fromJsonObject(QJsonObject json) {

    m_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_measure_unit, json[QString("measure_unit")]);
    m_measure_unit_isSet = !json[QString("measure_unit")].isNull() && m_measure_unit_isValid;

    m_weigh_unit_isValid = ::OpenAPI::fromJsonValue(m_weigh_unit, json[QString("weigh_unit")]);
    m_weigh_unit_isSet = !json[QString("weigh_unit")].isNull() && m_weigh_unit_isValid;

    m_package_depth_isValid = ::OpenAPI::fromJsonValue(m_package_depth, json[QString("package_depth")]);
    m_package_depth_isSet = !json[QString("package_depth")].isNull() && m_package_depth_isValid;

    m_package_length_isValid = ::OpenAPI::fromJsonValue(m_package_length, json[QString("package_length")]);
    m_package_length_isSet = !json[QString("package_length")].isNull() && m_package_length_isValid;

    m_package_width_isValid = ::OpenAPI::fromJsonValue(m_package_width, json[QString("package_width")]);
    m_package_width_isSet = !json[QString("package_width")].isNull() && m_package_width_isValid;

    m_weight_major_isValid = ::OpenAPI::fromJsonValue(m_weight_major, json[QString("weight_major")]);
    m_weight_major_isSet = !json[QString("weight_major")].isNull() && m_weight_major_isValid;

    m_weight_minor_isValid = ::OpenAPI::fromJsonValue(m_weight_minor, json[QString("weight_minor")]);
    m_weight_minor_isSet = !json[QString("weight_minor")].isNull() && m_weight_minor_isValid;

    m_shipping_package_isValid = ::OpenAPI::fromJsonValue(m_shipping_package, json[QString("shipping_package")]);
    m_shipping_package_isSet = !json[QString("shipping_package")].isNull() && m_shipping_package_isValid;
}

QString OAIProductAdd_package_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductAdd_package_details::asJsonObject() const {
    QJsonObject obj;
    if (m_measure_unit_isSet) {
        obj.insert(QString("measure_unit"), ::OpenAPI::toJsonValue(m_measure_unit));
    }
    if (m_weigh_unit_isSet) {
        obj.insert(QString("weigh_unit"), ::OpenAPI::toJsonValue(m_weigh_unit));
    }
    if (m_package_depth_isSet) {
        obj.insert(QString("package_depth"), ::OpenAPI::toJsonValue(m_package_depth));
    }
    if (m_package_length_isSet) {
        obj.insert(QString("package_length"), ::OpenAPI::toJsonValue(m_package_length));
    }
    if (m_package_width_isSet) {
        obj.insert(QString("package_width"), ::OpenAPI::toJsonValue(m_package_width));
    }
    if (m_weight_major_isSet) {
        obj.insert(QString("weight_major"), ::OpenAPI::toJsonValue(m_weight_major));
    }
    if (m_weight_minor_isSet) {
        obj.insert(QString("weight_minor"), ::OpenAPI::toJsonValue(m_weight_minor));
    }
    if (m_shipping_package_isSet) {
        obj.insert(QString("shipping_package"), ::OpenAPI::toJsonValue(m_shipping_package));
    }
    return obj;
}

QString OAIProductAdd_package_details::getMeasureUnit() const {
    return m_measure_unit;
}
void OAIProductAdd_package_details::setMeasureUnit(const QString &measure_unit) {
    m_measure_unit = measure_unit;
    m_measure_unit_isSet = true;
}

bool OAIProductAdd_package_details::is_measure_unit_Set() const{
    return m_measure_unit_isSet;
}

bool OAIProductAdd_package_details::is_measure_unit_Valid() const{
    return m_measure_unit_isValid;
}

QString OAIProductAdd_package_details::getWeighUnit() const {
    return m_weigh_unit;
}
void OAIProductAdd_package_details::setWeighUnit(const QString &weigh_unit) {
    m_weigh_unit = weigh_unit;
    m_weigh_unit_isSet = true;
}

bool OAIProductAdd_package_details::is_weigh_unit_Set() const{
    return m_weigh_unit_isSet;
}

bool OAIProductAdd_package_details::is_weigh_unit_Valid() const{
    return m_weigh_unit_isValid;
}

double OAIProductAdd_package_details::getPackageDepth() const {
    return m_package_depth;
}
void OAIProductAdd_package_details::setPackageDepth(const double &package_depth) {
    m_package_depth = package_depth;
    m_package_depth_isSet = true;
}

bool OAIProductAdd_package_details::is_package_depth_Set() const{
    return m_package_depth_isSet;
}

bool OAIProductAdd_package_details::is_package_depth_Valid() const{
    return m_package_depth_isValid;
}

double OAIProductAdd_package_details::getPackageLength() const {
    return m_package_length;
}
void OAIProductAdd_package_details::setPackageLength(const double &package_length) {
    m_package_length = package_length;
    m_package_length_isSet = true;
}

bool OAIProductAdd_package_details::is_package_length_Set() const{
    return m_package_length_isSet;
}

bool OAIProductAdd_package_details::is_package_length_Valid() const{
    return m_package_length_isValid;
}

double OAIProductAdd_package_details::getPackageWidth() const {
    return m_package_width;
}
void OAIProductAdd_package_details::setPackageWidth(const double &package_width) {
    m_package_width = package_width;
    m_package_width_isSet = true;
}

bool OAIProductAdd_package_details::is_package_width_Set() const{
    return m_package_width_isSet;
}

bool OAIProductAdd_package_details::is_package_width_Valid() const{
    return m_package_width_isValid;
}

double OAIProductAdd_package_details::getWeightMajor() const {
    return m_weight_major;
}
void OAIProductAdd_package_details::setWeightMajor(const double &weight_major) {
    m_weight_major = weight_major;
    m_weight_major_isSet = true;
}

bool OAIProductAdd_package_details::is_weight_major_Set() const{
    return m_weight_major_isSet;
}

bool OAIProductAdd_package_details::is_weight_major_Valid() const{
    return m_weight_major_isValid;
}

double OAIProductAdd_package_details::getWeightMinor() const {
    return m_weight_minor;
}
void OAIProductAdd_package_details::setWeightMinor(const double &weight_minor) {
    m_weight_minor = weight_minor;
    m_weight_minor_isSet = true;
}

bool OAIProductAdd_package_details::is_weight_minor_Set() const{
    return m_weight_minor_isSet;
}

bool OAIProductAdd_package_details::is_weight_minor_Valid() const{
    return m_weight_minor_isValid;
}

QString OAIProductAdd_package_details::getShippingPackage() const {
    return m_shipping_package;
}
void OAIProductAdd_package_details::setShippingPackage(const QString &shipping_package) {
    m_shipping_package = shipping_package;
    m_shipping_package_isSet = true;
}

bool OAIProductAdd_package_details::is_shipping_package_Set() const{
    return m_shipping_package_isSet;
}

bool OAIProductAdd_package_details::is_shipping_package_Valid() const{
    return m_shipping_package_isValid;
}

bool OAIProductAdd_package_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_measure_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weigh_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_major_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_minor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_package_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductAdd_package_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
