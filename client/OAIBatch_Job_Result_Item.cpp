/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch_Job_Result_Item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch_Job_Result_Item::OAIBatch_Job_Result_Item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch_Job_Result_Item::OAIBatch_Job_Result_Item() {
    this->initializeModel();
}

OAIBatch_Job_Result_Item::~OAIBatch_Job_Result_Item() {}

void OAIBatch_Job_Result_Item::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAIBatch_Job_Result_Item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch_Job_Result_Item::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAIBatch_Job_Result_Item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch_Job_Result_Item::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

qint32 OAIBatch_Job_Result_Item::getId() const {
    return m_id;
}
void OAIBatch_Job_Result_Item::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBatch_Job_Result_Item::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBatch_Job_Result_Item::getStatus() const {
    return m_status;
}
void OAIBatch_Job_Result_Item::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatch_Job_Result_Item::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBatch_Job_Result_Item::getEntityId() const {
    return m_entity_id;
}
void OAIBatch_Job_Result_Item::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIBatch_Job_Result_Item::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QList<QString> OAIBatch_Job_Result_Item::getErrors() const {
    return m_errors;
}
void OAIBatch_Job_Result_Item::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatch_Job_Result_Item::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<QString> OAIBatch_Job_Result_Item::getWarnings() const {
    return m_warnings;
}
void OAIBatch_Job_Result_Item::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIBatch_Job_Result_Item::is_warnings_Valid() const{
    return m_warnings_isValid;
}

OAIObject OAIBatch_Job_Result_Item::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIBatch_Job_Result_Item::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIBatch_Job_Result_Item::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAIBatch_Job_Result_Item::getCustomFields() const {
    return m_custom_fields;
}
void OAIBatch_Job_Result_Item::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIBatch_Job_Result_Item::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIBatch_Job_Result_Item::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIBatch_Job_Result_Item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch_Job_Result_Item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
