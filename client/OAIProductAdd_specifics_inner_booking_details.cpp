/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductAdd_specifics_inner_booking_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductAdd_specifics_inner_booking_details::OAIProductAdd_specifics_inner_booking_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductAdd_specifics_inner_booking_details::OAIProductAdd_specifics_inner_booking_details() {
    this->initializeModel();
}

OAIProductAdd_specifics_inner_booking_details::~OAIProductAdd_specifics_inner_booking_details() {}

void OAIProductAdd_specifics_inner_booking_details::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_session_duration_isSet = false;
    m_session_duration_isValid = false;

    m_session_gap_isSet = false;
    m_session_gap_isValid = false;

    m_sessions_count_isSet = false;
    m_sessions_count_isValid = false;

    m_time_strict_value_isSet = false;
    m_time_strict_value_isValid = false;

    m_time_strict_type_isSet = false;
    m_time_strict_type_isValid = false;

    m_availabilities_isSet = false;
    m_availabilities_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;
}

void OAIProductAdd_specifics_inner_booking_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductAdd_specifics_inner_booking_details::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_session_duration_isValid = ::OpenAPI::fromJsonValue(m_session_duration, json[QString("session_duration")]);
    m_session_duration_isSet = !json[QString("session_duration")].isNull() && m_session_duration_isValid;

    m_session_gap_isValid = ::OpenAPI::fromJsonValue(m_session_gap, json[QString("session_gap")]);
    m_session_gap_isSet = !json[QString("session_gap")].isNull() && m_session_gap_isValid;

    m_sessions_count_isValid = ::OpenAPI::fromJsonValue(m_sessions_count, json[QString("sessions_count")]);
    m_sessions_count_isSet = !json[QString("sessions_count")].isNull() && m_sessions_count_isValid;

    m_time_strict_value_isValid = ::OpenAPI::fromJsonValue(m_time_strict_value, json[QString("time_strict_value")]);
    m_time_strict_value_isSet = !json[QString("time_strict_value")].isNull() && m_time_strict_value_isValid;

    m_time_strict_type_isValid = ::OpenAPI::fromJsonValue(m_time_strict_type, json[QString("time_strict_type")]);
    m_time_strict_type_isSet = !json[QString("time_strict_type")].isNull() && m_time_strict_type_isValid;

    m_availabilities_isValid = ::OpenAPI::fromJsonValue(m_availabilities, json[QString("availabilities")]);
    m_availabilities_isSet = !json[QString("availabilities")].isNull() && m_availabilities_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;
}

QString OAIProductAdd_specifics_inner_booking_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductAdd_specifics_inner_booking_details::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_session_duration_isSet) {
        obj.insert(QString("session_duration"), ::OpenAPI::toJsonValue(m_session_duration));
    }
    if (m_session_gap_isSet) {
        obj.insert(QString("session_gap"), ::OpenAPI::toJsonValue(m_session_gap));
    }
    if (m_sessions_count_isSet) {
        obj.insert(QString("sessions_count"), ::OpenAPI::toJsonValue(m_sessions_count));
    }
    if (m_time_strict_value_isSet) {
        obj.insert(QString("time_strict_value"), ::OpenAPI::toJsonValue(m_time_strict_value));
    }
    if (m_time_strict_type_isSet) {
        obj.insert(QString("time_strict_type"), ::OpenAPI::toJsonValue(m_time_strict_type));
    }
    if (m_availabilities.size() > 0) {
        obj.insert(QString("availabilities"), ::OpenAPI::toJsonValue(m_availabilities));
    }
    if (m_overrides.size() > 0) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    return obj;
}

QString OAIProductAdd_specifics_inner_booking_details::getLocation() const {
    return m_location;
}
void OAIProductAdd_specifics_inner_booking_details::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIProductAdd_specifics_inner_booking_details::getType() const {
    return m_type;
}
void OAIProductAdd_specifics_inner_booking_details::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIProductAdd_specifics_inner_booking_details::getSessionDuration() const {
    return m_session_duration;
}
void OAIProductAdd_specifics_inner_booking_details::setSessionDuration(const qint32 &session_duration) {
    m_session_duration = session_duration;
    m_session_duration_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_session_duration_Set() const{
    return m_session_duration_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_session_duration_Valid() const{
    return m_session_duration_isValid;
}

qint32 OAIProductAdd_specifics_inner_booking_details::getSessionGap() const {
    return m_session_gap;
}
void OAIProductAdd_specifics_inner_booking_details::setSessionGap(const qint32 &session_gap) {
    m_session_gap = session_gap;
    m_session_gap_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_session_gap_Set() const{
    return m_session_gap_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_session_gap_Valid() const{
    return m_session_gap_isValid;
}

qint32 OAIProductAdd_specifics_inner_booking_details::getSessionsCount() const {
    return m_sessions_count;
}
void OAIProductAdd_specifics_inner_booking_details::setSessionsCount(const qint32 &sessions_count) {
    m_sessions_count = sessions_count;
    m_sessions_count_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_sessions_count_Set() const{
    return m_sessions_count_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_sessions_count_Valid() const{
    return m_sessions_count_isValid;
}

double OAIProductAdd_specifics_inner_booking_details::getTimeStrictValue() const {
    return m_time_strict_value;
}
void OAIProductAdd_specifics_inner_booking_details::setTimeStrictValue(const double &time_strict_value) {
    m_time_strict_value = time_strict_value;
    m_time_strict_value_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_time_strict_value_Set() const{
    return m_time_strict_value_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_time_strict_value_Valid() const{
    return m_time_strict_value_isValid;
}

QString OAIProductAdd_specifics_inner_booking_details::getTimeStrictType() const {
    return m_time_strict_type;
}
void OAIProductAdd_specifics_inner_booking_details::setTimeStrictType(const QString &time_strict_type) {
    m_time_strict_type = time_strict_type;
    m_time_strict_type_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_time_strict_type_Set() const{
    return m_time_strict_type_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_time_strict_type_Valid() const{
    return m_time_strict_type_isValid;
}

QList<OAIProductAdd_specifics_inner_booking_details_availabilities_inner> OAIProductAdd_specifics_inner_booking_details::getAvailabilities() const {
    return m_availabilities;
}
void OAIProductAdd_specifics_inner_booking_details::setAvailabilities(const QList<OAIProductAdd_specifics_inner_booking_details_availabilities_inner> &availabilities) {
    m_availabilities = availabilities;
    m_availabilities_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_availabilities_Set() const{
    return m_availabilities_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_availabilities_Valid() const{
    return m_availabilities_isValid;
}

QList<OAIProductAdd_specifics_inner_booking_details_overrides_inner> OAIProductAdd_specifics_inner_booking_details::getOverrides() const {
    return m_overrides;
}
void OAIProductAdd_specifics_inner_booking_details::setOverrides(const QList<OAIProductAdd_specifics_inner_booking_details_overrides_inner> &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIProductAdd_specifics_inner_booking_details::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIProductAdd_specifics_inner_booking_details::is_overrides_Valid() const{
    return m_overrides_isValid;
}

bool OAIProductAdd_specifics_inner_booking_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_gap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_strict_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_strict_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductAdd_specifics_inner_booking_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_type_isValid && m_sessions_count_isValid && m_time_strict_value_isValid && m_time_strict_type_isValid && m_availabilities_isValid && true;
}

} // namespace OpenAPI
