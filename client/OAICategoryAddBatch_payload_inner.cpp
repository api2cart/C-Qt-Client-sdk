/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryAddBatch_payload_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryAddBatch_payload_inner::OAICategoryAddBatch_payload_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryAddBatch_payload_inner::OAICategoryAddBatch_payload_inner() {
    this->initializeModel();
}

OAICategoryAddBatch_payload_inner::~OAICategoryAddBatch_payload_inner() {}

void OAICategoryAddBatch_payload_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_avail_isSet = false;
    m_avail_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_meta_title_isSet = false;
    m_meta_title_isValid = false;

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_meta_keywords_isSet = false;
    m_meta_keywords_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_seo_url_isSet = false;
    m_seo_url_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_stores_ids_isSet = false;
    m_stores_ids_isValid = false;
}

void OAICategoryAddBatch_payload_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryAddBatch_payload_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_avail_isValid = ::OpenAPI::fromJsonValue(m_avail, json[QString("avail")]);
    m_avail_isSet = !json[QString("avail")].isNull() && m_avail_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_meta_title_isValid = ::OpenAPI::fromJsonValue(m_meta_title, json[QString("meta_title")]);
    m_meta_title_isSet = !json[QString("meta_title")].isNull() && m_meta_title_isValid;

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("meta_description")]);
    m_meta_description_isSet = !json[QString("meta_description")].isNull() && m_meta_description_isValid;

    m_meta_keywords_isValid = ::OpenAPI::fromJsonValue(m_meta_keywords, json[QString("meta_keywords")]);
    m_meta_keywords_isSet = !json[QString("meta_keywords")].isNull() && m_meta_keywords_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_seo_url_isValid = ::OpenAPI::fromJsonValue(m_seo_url, json[QString("seo_url")]);
    m_seo_url_isSet = !json[QString("seo_url")].isNull() && m_seo_url_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_stores_ids_isValid = ::OpenAPI::fromJsonValue(m_stores_ids, json[QString("stores_ids")]);
    m_stores_ids_isSet = !json[QString("stores_ids")].isNull() && m_stores_ids_isValid;
}

QString OAICategoryAddBatch_payload_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryAddBatch_payload_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_avail_isSet) {
        obj.insert(QString("avail"), ::OpenAPI::toJsonValue(m_avail));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_meta_title_isSet) {
        obj.insert(QString("meta_title"), ::OpenAPI::toJsonValue(m_meta_title));
    }
    if (m_meta_description_isSet) {
        obj.insert(QString("meta_description"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_meta_keywords.size() > 0) {
        obj.insert(QString("meta_keywords"), ::OpenAPI::toJsonValue(m_meta_keywords));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_seo_url_isSet) {
        obj.insert(QString("seo_url"), ::OpenAPI::toJsonValue(m_seo_url));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_stores_ids.size() > 0) {
        obj.insert(QString("stores_ids"), ::OpenAPI::toJsonValue(m_stores_ids));
    }
    return obj;
}

QString OAICategoryAddBatch_payload_inner::getName() const {
    return m_name;
}
void OAICategoryAddBatch_payload_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICategoryAddBatch_payload_inner::isAvail() const {
    return m_avail;
}
void OAICategoryAddBatch_payload_inner::setAvail(const bool &avail) {
    m_avail = avail;
    m_avail_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_avail_Set() const{
    return m_avail_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_avail_Valid() const{
    return m_avail_isValid;
}

QString OAICategoryAddBatch_payload_inner::getDescription() const {
    return m_description;
}
void OAICategoryAddBatch_payload_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICategoryAddBatch_payload_inner::getMetaTitle() const {
    return m_meta_title;
}
void OAICategoryAddBatch_payload_inner::setMetaTitle(const QString &meta_title) {
    m_meta_title = meta_title;
    m_meta_title_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_meta_title_Set() const{
    return m_meta_title_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_meta_title_Valid() const{
    return m_meta_title_isValid;
}

QString OAICategoryAddBatch_payload_inner::getMetaDescription() const {
    return m_meta_description;
}
void OAICategoryAddBatch_payload_inner::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QList<QString> OAICategoryAddBatch_payload_inner::getMetaKeywords() const {
    return m_meta_keywords;
}
void OAICategoryAddBatch_payload_inner::setMetaKeywords(const QList<QString> &meta_keywords) {
    m_meta_keywords = meta_keywords;
    m_meta_keywords_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_meta_keywords_Set() const{
    return m_meta_keywords_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_meta_keywords_Valid() const{
    return m_meta_keywords_isValid;
}

QString OAICategoryAddBatch_payload_inner::getParentId() const {
    return m_parent_id;
}
void OAICategoryAddBatch_payload_inner::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint32 OAICategoryAddBatch_payload_inner::getSortOrder() const {
    return m_sort_order;
}
void OAICategoryAddBatch_payload_inner::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAICategoryAddBatch_payload_inner::getSeoUrl() const {
    return m_seo_url;
}
void OAICategoryAddBatch_payload_inner::setSeoUrl(const QString &seo_url) {
    m_seo_url = seo_url;
    m_seo_url_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_seo_url_Set() const{
    return m_seo_url_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_seo_url_Valid() const{
    return m_seo_url_isValid;
}

QString OAICategoryAddBatch_payload_inner::getStoreId() const {
    return m_store_id;
}
void OAICategoryAddBatch_payload_inner::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QList<OAICategoryAddBatch_payload_inner_images_inner> OAICategoryAddBatch_payload_inner::getImages() const {
    return m_images;
}
void OAICategoryAddBatch_payload_inner::setImages(const QList<OAICategoryAddBatch_payload_inner_images_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_images_Set() const{
    return m_images_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_images_Valid() const{
    return m_images_isValid;
}

QList<QString> OAICategoryAddBatch_payload_inner::getStoresIds() const {
    return m_stores_ids;
}
void OAICategoryAddBatch_payload_inner::setStoresIds(const QList<QString> &stores_ids) {
    m_stores_ids = stores_ids;
    m_stores_ids_isSet = true;
}

bool OAICategoryAddBatch_payload_inner::is_stores_ids_Set() const{
    return m_stores_ids_isSet;
}

bool OAICategoryAddBatch_payload_inner::is_stores_ids_Valid() const{
    return m_stores_ids_isValid;
}

bool OAICategoryAddBatch_payload_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryAddBatch_payload_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
