/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart_ShippingMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart_ShippingMethod::OAICart_ShippingMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart_ShippingMethod::OAICart_ShippingMethod() {
    this->initializeModel();
}

OAICart_ShippingMethod::~OAICart_ShippingMethod() {}

void OAICart_ShippingMethod::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_handling_fee_isSet = false;
    m_handling_fee_isValid = false;

    m_handling_enabled_isSet = false;
    m_handling_enabled_isValid = false;

    m_handling_type_isSet = false;
    m_handling_type_isValid = false;

    m_default_price_isSet = false;
    m_default_price_isValid = false;

    m_default_price_type_isSet = false;
    m_default_price_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_min_order_amount_isSet = false;
    m_min_order_amount_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;
}

void OAICart_ShippingMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart_ShippingMethod::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_handling_fee_isValid = ::OpenAPI::fromJsonValue(m_handling_fee, json[QString("handling_fee")]);
    m_handling_fee_isSet = !json[QString("handling_fee")].isNull() && m_handling_fee_isValid;

    m_handling_enabled_isValid = ::OpenAPI::fromJsonValue(m_handling_enabled, json[QString("handling_enabled")]);
    m_handling_enabled_isSet = !json[QString("handling_enabled")].isNull() && m_handling_enabled_isValid;

    m_handling_type_isValid = ::OpenAPI::fromJsonValue(m_handling_type, json[QString("handling_type")]);
    m_handling_type_isSet = !json[QString("handling_type")].isNull() && m_handling_type_isValid;

    m_default_price_isValid = ::OpenAPI::fromJsonValue(m_default_price, json[QString("default_price")]);
    m_default_price_isSet = !json[QString("default_price")].isNull() && m_default_price_isValid;

    m_default_price_type_isValid = ::OpenAPI::fromJsonValue(m_default_price_type, json[QString("default_price_type")]);
    m_default_price_type_isSet = !json[QString("default_price_type")].isNull() && m_default_price_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_min_order_amount_isValid = ::OpenAPI::fromJsonValue(m_min_order_amount, json[QString("min_order_amount")]);
    m_min_order_amount_isSet = !json[QString("min_order_amount")].isNull() && m_min_order_amount_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;
}

QString OAICart_ShippingMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart_ShippingMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_handling_fee_isSet) {
        obj.insert(QString("handling_fee"), ::OpenAPI::toJsonValue(m_handling_fee));
    }
    if (m_handling_enabled_isSet) {
        obj.insert(QString("handling_enabled"), ::OpenAPI::toJsonValue(m_handling_enabled));
    }
    if (m_handling_type_isSet) {
        obj.insert(QString("handling_type"), ::OpenAPI::toJsonValue(m_handling_type));
    }
    if (m_default_price_isSet) {
        obj.insert(QString("default_price"), ::OpenAPI::toJsonValue(m_default_price));
    }
    if (m_default_price_type_isSet) {
        obj.insert(QString("default_price_type"), ::OpenAPI::toJsonValue(m_default_price_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_min_order_amount_isSet) {
        obj.insert(QString("min_order_amount"), ::OpenAPI::toJsonValue(m_min_order_amount));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    return obj;
}

QString OAICart_ShippingMethod::getName() const {
    return m_name;
}
void OAICart_ShippingMethod::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICart_ShippingMethod::is_name_Set() const{
    return m_name_isSet;
}

bool OAICart_ShippingMethod::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICart_ShippingMethod::getHandlingFee() const {
    return m_handling_fee;
}
void OAICart_ShippingMethod::setHandlingFee(const QString &handling_fee) {
    m_handling_fee = handling_fee;
    m_handling_fee_isSet = true;
}

bool OAICart_ShippingMethod::is_handling_fee_Set() const{
    return m_handling_fee_isSet;
}

bool OAICart_ShippingMethod::is_handling_fee_Valid() const{
    return m_handling_fee_isValid;
}

QString OAICart_ShippingMethod::getHandlingEnabled() const {
    return m_handling_enabled;
}
void OAICart_ShippingMethod::setHandlingEnabled(const QString &handling_enabled) {
    m_handling_enabled = handling_enabled;
    m_handling_enabled_isSet = true;
}

bool OAICart_ShippingMethod::is_handling_enabled_Set() const{
    return m_handling_enabled_isSet;
}

bool OAICart_ShippingMethod::is_handling_enabled_Valid() const{
    return m_handling_enabled_isValid;
}

QString OAICart_ShippingMethod::getHandlingType() const {
    return m_handling_type;
}
void OAICart_ShippingMethod::setHandlingType(const QString &handling_type) {
    m_handling_type = handling_type;
    m_handling_type_isSet = true;
}

bool OAICart_ShippingMethod::is_handling_type_Set() const{
    return m_handling_type_isSet;
}

bool OAICart_ShippingMethod::is_handling_type_Valid() const{
    return m_handling_type_isValid;
}

QString OAICart_ShippingMethod::getDefaultPrice() const {
    return m_default_price;
}
void OAICart_ShippingMethod::setDefaultPrice(const QString &default_price) {
    m_default_price = default_price;
    m_default_price_isSet = true;
}

bool OAICart_ShippingMethod::is_default_price_Set() const{
    return m_default_price_isSet;
}

bool OAICart_ShippingMethod::is_default_price_Valid() const{
    return m_default_price_isValid;
}

QString OAICart_ShippingMethod::getDefaultPriceType() const {
    return m_default_price_type;
}
void OAICart_ShippingMethod::setDefaultPriceType(const QString &default_price_type) {
    m_default_price_type = default_price_type;
    m_default_price_type_isSet = true;
}

bool OAICart_ShippingMethod::is_default_price_type_Set() const{
    return m_default_price_type_isSet;
}

bool OAICart_ShippingMethod::is_default_price_type_Valid() const{
    return m_default_price_type_isValid;
}

QString OAICart_ShippingMethod::getType() const {
    return m_type;
}
void OAICart_ShippingMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICart_ShippingMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAICart_ShippingMethod::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICart_ShippingMethod::getEnabled() const {
    return m_enabled;
}
void OAICart_ShippingMethod::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICart_ShippingMethod::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICart_ShippingMethod::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICart_ShippingMethod::getMinOrderAmount() const {
    return m_min_order_amount;
}
void OAICart_ShippingMethod::setMinOrderAmount(const QString &min_order_amount) {
    m_min_order_amount = min_order_amount;
    m_min_order_amount_isSet = true;
}

bool OAICart_ShippingMethod::is_min_order_amount_Set() const{
    return m_min_order_amount_isSet;
}

bool OAICart_ShippingMethod::is_min_order_amount_Valid() const{
    return m_min_order_amount_isValid;
}

QList<OAICart_ShippingMethod_Rate> OAICart_ShippingMethod::getRates() const {
    return m_rates;
}
void OAICart_ShippingMethod::setRates(const QList<OAICart_ShippingMethod_Rate> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAICart_ShippingMethod::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAICart_ShippingMethod::is_rates_Valid() const{
    return m_rates_isValid;
}

OAIObject OAICart_ShippingMethod::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICart_ShippingMethod::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICart_ShippingMethod::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICart_ShippingMethod::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAICart_ShippingMethod::getCustomFields() const {
    return m_custom_fields;
}
void OAICart_ShippingMethod::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICart_ShippingMethod::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICart_ShippingMethod::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAICart_ShippingMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart_ShippingMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
